
----- switch ------
1 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

2 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

3 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

4 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

5 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

6 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

7 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

8 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

9 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

10 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

11 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

12 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

13 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

14 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

15 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

16 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

17 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

18 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

19 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

20 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

21 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

22 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

23 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

24 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

25 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

26 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

27 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

28 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

29 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

30 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

31 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

32 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

33 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

34 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

35 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

36 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

37 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

38 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

39 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

40 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

41 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

42 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

43 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

44 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

45 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

46 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

47 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

48 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

49 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

50 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

51 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

52 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

53 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

54 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

55 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

56 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

57 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

58 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

59 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

60 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

61 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

62 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

63 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

64 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

65 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

66 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

67 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

68 : VP(VB(switch),PP(IN(to),NP(Before_attribute_name_state(det(the)))))
 ==> switch_to_the

69 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

70 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

71 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

72 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

73 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

74 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

75 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

76 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

77 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

78 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

79 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

80 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

81 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

82 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

83 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

84 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

85 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

86 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

87 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

88 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

89 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

90 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

91 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

92 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

93 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

94 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

95 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

96 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

97 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

98 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

99 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

100 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

101 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

102 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

103 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

104 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

105 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

106 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

107 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

108 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

109 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

110 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

111 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

112 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

113 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

114 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

115 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

116 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

117 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

118 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

119 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

120 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

121 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

122 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

123 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

124 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

125 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

126 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

127 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

128 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

129 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

130 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

131 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)

132 : VP(VB(switch),PP(IN(to),NP(z0)))
 ==> switch_to(z0)


----- set ------
1 : VP(X0)
 ==> (VP(X0))

2 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

3 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

4 : VP(VB(set),NP(z0),PP(IN(to),NP(string(X1))))
 ==> set_to(z0,string(X1))

5 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

6 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

7 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

8 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

9 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

10 : VP(VB(set),NP(z0),PP(IN(to),NP(z1)))
 ==> set_to(z0,z1)

11 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

12 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

13 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

14 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

15 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

16 : VP(VB(set),NP(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),PP(IN(to),ADVP(RP(on))))
 ==> set_the_DOCTYPE_'s_force-quirks_to_on

17 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

18 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

19 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

20 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

21 : VP(VB(set),NP(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),PP(IN(to),ADVP(RP(on))))
 ==> set_the_DOCTYPE_'s_force-quirks_to_on

22 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

23 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

24 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

25 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

26 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

27 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

28 : VP(VB(set),NP(z0),PP(IN(to),NP(z1)))
 ==> set_to(z0,z1)

29 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

30 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

31 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

32 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

33 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

34 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

35 : VP(X0)
 ==> (VP(X0))

36 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

37 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

38 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

39 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

40 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

41 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

42 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

43 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)

44 : VP(VB(set),NP(z0),PP(IN(to),z1))
 ==> set_to(z0,z1)


----- create ------
1 : VP(VB(create),NP(token(X0)))
 ==> create(token(X0))

2 : VP(VB(create),NP(token(X0)))
 ==> create(token(X0))

3 : VP(VB(create),NP(token(det(a),z0,z1)))
 ==> create_a(z0,z1)

4 : VP(VB(create),NP(token(det(a),amod(new),compound(DOCTYPE))))
 ==> create_a_new_DOCTYPE

5 : VP(VB(create),NP(token(det(a),amod(new),compound(end),compound(tag))))
 ==> create_a_new_end_tag

6 : VP(VB(create),NP(token(X0)))
 ==> create(token(X0))

7 : VP(VB(create),NP(token(X0)))
 ==> create(token(X0))

8 : VP(VB(create),NP(token(X0)))
 ==> create(token(X0))

9 : VP(VB(create),NP(token(X0)))
 ==> create(token(X0))

10 : VP(VB(create),NP(token(det(a),z0,z1)))
 ==> create_a(z0,z1)


----- reconsume ------
1 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

2 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

3 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

4 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

5 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

6 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

7 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

8 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

9 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

10 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

11 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

12 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

13 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

14 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

15 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

16 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

17 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

18 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

19 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

20 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

21 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

22 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

23 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

24 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

25 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

26 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

27 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

28 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

29 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

30 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

31 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

32 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

33 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

34 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

35 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

36 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

37 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

38 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

39 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

40 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

41 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

42 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

43 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

44 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

45 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

46 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

47 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

48 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

49 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)

50 : VP(VB(reconsume),PP(IN(in),NP(z0)))
 ==> reconsume_in(z0)


----- multiply ------
1 : VP(VB(multiply),NP(code(det(the),compound(reference(compound(character))))),PP(IN(by),NP(z0)))
 ==> multiply_the_character_by(z0)

2 : VP(VB(multiply),NP(code(det(the),compound(reference(compound(character))))),PP(IN(by),NP(z0)))
 ==> multiply_the_character_by(z0)


----- consume ------
1 : VP(VB(consume),NP(z0))
 ==> consume(z0)

2 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

3 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

4 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

5 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

6 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

7 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

8 : VP(VB(consume),NP(z0))
 ==> consume(z0)

9 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

10 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

11 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

12 : VP(VB(consume),NP(z0))
 ==> consume(z0)

13 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

14 : VP(X0)
 ==> (VP(X0))

15 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

16 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

17 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

18 : VP(VB(consume),NP(z0))
 ==> consume(z0)

19 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

20 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

21 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

22 : VP(VB(consume),NP(z0))
 ==> consume(z0)

23 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

24 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

25 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

26 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

27 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

28 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

29 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

30 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

31 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

32 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

33 : VP(VB(consume),NP(z0))
 ==> consume(z0)

34 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

35 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

36 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

37 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

38 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

39 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

40 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

41 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

42 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

43 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

44 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

45 : VP(VB(consume),NP(z0))
 ==> consume(z0)

46 : VP(X0)
 ==> (VP(X0))

47 : VP(VB(consume),NP(z0))
 ==> consume(z0)

48 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

49 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

50 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

51 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

52 : VP(VB(consume),NP(z0))
 ==> consume(z0)

53 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input

54 : VP(VB(consume),NP(character(det(the),amod(next),compound(input))))
 ==> consume_the_next_input


----- start ------

----- add ------
1 : VP(VB(add),NP(version(X0)),PP(IN(to),NP(code(det(the),compound(reference(compound(character)))))))
 ==> add_to_the_character(version(X0))

2 : VP(VB(add),NP(version(X0)),PP(IN(to),NP(code(det(the),compound(reference(compound(character)))))))
 ==> add_to_the_character(version(X0))


----- ignore ------
1 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

2 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

3 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

4 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

5 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

6 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

7 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

8 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

9 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

10 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

11 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

12 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

13 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

14 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

15 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

16 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

17 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

18 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

19 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

20 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

21 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

22 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

23 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the

24 : VP(VB(ignore),NP(character(det(the))))
 ==> ignore_the


----- append ------
1 : VP(VB(append),NP(character(det(the),amod(current),compound(input))),PP(IN(to),NP(z0)))
 ==> append_the_current_input_to(z0)

2 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

3 : VP(VB(append),NP(character(det(the),amod(current),compound(input))),PP(IN(to),NP(z0)))
 ==> append_the_current_input_to(z0)

4 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

5 : VP(X0)
 ==> (VP(X0))

6 : VP(X0)
 ==> (VP(X0))

7 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

8 : VP(VB(append),NP(z0),PP(IN(to),NP(z1)))
 ==> append_to(z0,z1)

9 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

10 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

11 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

12 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

13 : VP(VB(append),NP(character(det(a),compound(U+FFFD),compound(REPLACEMENT),compound(CHARACTER))),PP(IN(to),NP(z0)))
 ==> append_a_U+FFFD_REPLACEMENT_CHARACTER_to(z0)

14 : VP(VB(append),NP(character(det(the),amod(current),compound(input))),PP(IN(to),NP(z0)))
 ==> append_the_current_input_to(z0)

15 : VP(VB(append),NP(character(det(the),amod(current),compound(input))),PP(IN(to),NP(z0)))
 ==> append_the_current_input_to(z0)

16 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

17 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

18 : VP(X0)
 ==> (VP(X0))

19 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

20 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

21 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

22 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(name(X1))))
 ==> append_to(character(X0),name(X1))

23 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

24 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

25 : VP(VB(append),NP(character(det(the),amod(current),compound(input))),PP(IN(to),NP(z0)))
 ==> append_the_current_input_to(z0)

26 : VP(VB(append),NP(z0),PP(IN(to),NP(z1)))
 ==> append_to(z0,z1)

27 : VP(X0)
 ==> (VP(X0))

28 : VP(X0)
 ==> (VP(X0))

29 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

30 : VP(VB(append),NP(character(det(the),amod(current),compound(input))),PP(IN(to),NP(z0)))
 ==> append_the_current_input_to(z0)

31 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

32 : VP(VB(append),NP(character(X0)),PP(IN(to),NP(z1)))
 ==> append_to(character(X0),z1)

33 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

34 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

35 : VP(z0,z1,PP(IN(to),NP(z2)))
 ==> to(z0,z1,z2)

36 : VP(X0)
 ==> (VP(X0))


----- _other ------
1 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

2 : VP(z0,z1)
 ==> (z0,z1)

3 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

4 : VP(VBZ(is),NP(z0))
 ==> is(z0)

5 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

6 : VP(VBZ(is),NP(z0))
 ==> is(z0)

7 : VP(z0,z1)
 ==> (z0,z1)

8 : VP(z0,NP(z1))
 ==> (z0,z1)

9 : VP(VBZ(is),NP(z0))
 ==> is(z0)

10 : VP(VBZ(is),NP(z0))
 ==> is(z0)

11 : VP(VBZ(is),NP(z0))
 ==> is(z0)

12 : VP(VBZ(is),NP(z0))
 ==> is(z0)

13 : VP(VBZ(is),NP(z0))
 ==> is(z0)

14 : VP(z0,NP(z1))
 ==> (z0,z1)

15 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

16 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

17 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

18 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

19 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

20 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

21 : VP(VBZ(is),NP(z0))
 ==> is(z0)

22 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

23 : VP(VBZ(is),NP(z0))
 ==> is(z0)

24 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

25 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

26 : VP(z0,z1)
 ==> (z0,z1)

27 : VP(z0,z1)
 ==> (z0,z1)

28 : VP(z0,z1)
 ==> (z0,z1)

29 : VP(VBZ(is),NP(z0))
 ==> is(z0)

30 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

31 : VP(VBZ(is),NP(z0))
 ==> is(z0)

32 : VP(VBZ(is),NP(z0))
 ==> is(z0)

33 : VP(X0)
 ==> (VP(X0))

34 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

35 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

36 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

37 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

38 : VP(z0,z1)
 ==> (z0,z1)

39 : VP(VBZ(is),NP(z0))
 ==> is(z0)

40 : VP(VBZ(is),NP(z0))
 ==> is(z0)

41 : VP(VBZ(is),NP(z0))
 ==> is(z0)

42 : VP(X0)
 ==> (VP(X0))

43 : VP(VBZ(is),NP(z0))
 ==> is(z0)

44 : VP(VBZ(is),NP(z0))
 ==> is(z0)

45 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

46 : VP(VBZ(is),NP(z0))
 ==> is(z0)

47 : VP(z0,z1)
 ==> (z0,z1)

48 : VP(z0,NP(z1))
 ==> (z0,z1)

49 : VP(VBZ(is),NP(z0))
 ==> is(z0)

50 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

51 : VP(VBZ(is),NP(z0))
 ==> is(z0)

52 : z0
 ==> (z0)

53 : VP(VBZ(is),NP(z0))
 ==> is(z0)

54 : z0
 ==> (z0)

55 : VP(VBZ(is),NP(z0))
 ==> is(z0)

56 : VP(X0)
 ==> (VP(X0))

57 : z0
 ==> (z0)

58 : VP(VBZ(is),NP(z0))
 ==> is(z0)

59 : VP(VBZ(is),NP(z0))
 ==> is(z0)

60 : VP(VBZ(is),NP(z0))
 ==> is(z0)

61 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

62 : VP(z0,z1)
 ==> (z0,z1)

63 : VP(VBZ(is),NP(z0))
 ==> is(z0)

64 : VP(X0)
 ==> (VP(X0))

65 : VP(z0,z1)
 ==> (z0,z1)

66 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

67 : VP(z0,z1)
 ==> (z0,z1)

68 : VP(VBZ(is),NP(z0))
 ==> is(z0)

69 : VP(VBZ(is),NP(z0))
 ==> is(z0)

70 : VP(VBZ(is),NP(z0))
 ==> is(z0)

71 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

72 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

73 : VP(VBZ(is),NP(z0))
 ==> is(z0)

74 : VP(z0,NP(z1))
 ==> (z0,z1)

75 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

76 : VP(z0,NP(z1))
 ==> (z0,z1)

77 : VP(VBZ(is),NP(z0))
 ==> is(z0)

78 : VP(VBZ(is),NP(z0))
 ==> is(z0)

79 : VP(VBZ(is),NP(z0))
 ==> is(z0)

80 : VP(VBZ(is),NP(z0))
 ==> is(z0)

81 : VP(VBZ(is),NP(z0))
 ==> is(z0)

82 : VP(z0,z1)
 ==> (z0,z1)

83 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

84 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

85 : VP(VBZ(is),NP(z0))
 ==> is(z0)

86 : VP(z0,NP(z1))
 ==> (z0,z1)

87 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

88 : VP(VBZ(is),NP(z0))
 ==> is(z0)

89 : VP(VBZ(is),NP(z0))
 ==> is(z0)

90 : VP(VBZ(is),NP(z0))
 ==> is(z0)

91 : VP(VBZ(is),NP(z0))
 ==> is(z0)

92 : VP(z0,z1)
 ==> (z0,z1)

93 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

94 : VP(z0,NP(z1))
 ==> (z0,z1)

95 : z0
 ==> (z0)

96 : VP(z0,z1)
 ==> (z0,z1)

97 : VP(VBZ(is),NP(z0))
 ==> is(z0)

98 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

99 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

100 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

101 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

102 : VP(VBZ(is),NP(z0))
 ==> is(z0)

103 : VP(VBZ(is),NP(z0))
 ==> is(z0)

104 : VP(VBZ(is),NP(error(det(z0),amod(z1),compound(parse))))
 ==> is_parse(z0,z1)

105 : VP(VBZ(is),NP(error(det(an),amod(z0),compound(parse))))
 ==> is_an_parse(z0)

106 : VP(z0,z1)
 ==> (z0,z1)

107 : VP(VBZ(is),NP(z0))
 ==> is(z0)

108 : VP(VBZ(is),NP(z0))
 ==> is(z0)


----- emit ------
1 : VP(X0)
 ==> (VP(X0))

2 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

3 : VP(X0)
 ==> (VP(X0))

4 : VP(X0)
 ==> (VP(X0))

5 : VP(X0)
 ==> (VP(X0))

6 : VP(X0)
 ==> (VP(X0))

7 : VP(X0)
 ==> (VP(X0))

8 : VP(X0)
 ==> (VP(X0))

9 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

10 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

11 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

12 : VP(X0)
 ==> (VP(X0))

13 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

14 : VP(X0)
 ==> (VP(X0))

15 : VP(X0)
 ==> (VP(X0))

16 : VP(VB(emit),NP(z0))
 ==> emit(z0)

17 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

18 : VP(X0)
 ==> (VP(X0))

19 : VP(X0)
 ==> (VP(X0))

20 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

21 : VP(X0)
 ==> (VP(X0))

22 : VP(X0)
 ==> (VP(X0))

23 : VP(VB(emit),NP(token(det(z0),z1)))
 ==> emit(z0,z1)

24 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

25 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

26 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

27 : VP(VB(emit),NP(token(det(z0),compound(z1))))
 ==> emit(z0,z1)

28 : VP(VB(emit),NP(token(det(an),amod(end-of-file))))
 ==> emit_an_end-of-file

29 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

30 : VP(X0)
 ==> (VP(X0))

31 : VP(X0)
 ==> (VP(X0))

32 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

33 : VP(VB(emit),NP(token(det(an),amod(end-of-file))))
 ==> emit_an_end-of-file

34 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

35 : VP(X0)
 ==> (VP(X0))

36 : VP(X0)
 ==> (VP(X0))

37 : VP(X0)
 ==> (VP(X0))

38 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

39 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

40 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

41 : VP(X0)
 ==> (VP(X0))

42 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

43 : VP(X0)
 ==> (VP(X0))

44 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

45 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

46 : VP(X0)
 ==> (VP(X0))

47 : VP(X0)
 ==> (VP(X0))

48 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

49 : VP(X0)
 ==> (VP(X0))

50 : VP(X0)
 ==> (VP(X0))

51 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

52 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

53 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

54 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

55 : VP(X0)
 ==> (VP(X0))

56 : VP(VB(emit),NP(token(det(that),compound(DOCTYPE))))
 ==> emit_that_DOCTYPE

57 : VP(X0)
 ==> (VP(X0))

58 : VP(X0)
 ==> (VP(X0))

59 : VP(X0)
 ==> (VP(X0))

60 : VP(X0)
 ==> (VP(X0))

61 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

62 : VP(VB(emit),NP(character(det(the),amod(current),compound(input))),PP(IN(as),NP(token(det(a),compound(character)))))
 ==> emit_the_current_input_as_a_character

63 : VP(X0)
 ==> (VP(X0))

64 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

65 : VP(X0)
 ==> (VP(X0))

66 : VP(X0)
 ==> (VP(X0))

67 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

68 : VP(VB(emit),NP(z0))
 ==> emit(z0)

69 : VP(X0)
 ==> (VP(X0))

70 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

71 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

72 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

73 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

74 : VP(X0)
 ==> (VP(X0))

75 : VP(X0)
 ==> (VP(X0))

76 : VP(VB(emit),NP(token(det(z0),compound(z1))))
 ==> emit(z0,z1)

77 : VP(X0)
 ==> (VP(X0))

78 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

79 : VP(X0)
 ==> (VP(X0))

80 : VP(VB(emit),NP(token(det(an),amod(end-of-file))))
 ==> emit_an_end-of-file

81 : VP(X0)
 ==> (VP(X0))

82 : VP(VB(emit),NP(token(det(z0),z1)))
 ==> emit(z0,z1)

83 : VP(X0)
 ==> (VP(X0))

84 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

85 : VP(X0)
 ==> (VP(X0))

86 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

87 : VP(X0)
 ==> (VP(X0))

88 : VP(X0)
 ==> (VP(X0))

89 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

90 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

91 : VP(X0)
 ==> (VP(X0))

92 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

93 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

94 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

95 : VP(X0)
 ==> (VP(X0))

96 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

97 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

98 : VP(X0)
 ==> (VP(X0))

99 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

100 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

101 : VP(X0)
 ==> (VP(X0))

102 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

103 : VP(VB(emit),NP(token(X0)))
 ==> emit(token(X0))

104 : VP(VB(emit),NP(token(det(z0),z1)))
 ==> emit(z0,z1)


----- flush ------

----- treat ------
1 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

2 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

3 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

4 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

5 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

6 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

7 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

8 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

9 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

10 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

11 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

12 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

13 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

14 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

15 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

16 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

17 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

18 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

19 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

20 : VP(VB(treat),NP(it),PP(IN(as),PP(IN(per),NP(entry(det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))))
 ==> treat_it_as_per_the_"_else_"_below

