--Data_state--
prev: 
 consume(next_input_character)
trans: 
 U+0026 AMPERSAND (&amp;) :
  set_to(return_state,Data_state)
  switch_to(Character_reference_state)
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Tag_open_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  emit_the_current_input_character_as_a_character_token
 EOF :
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--RCDATA_state--
prev: 
 consume(next_input_character)
trans: 
 U+0026 AMPERSAND (&amp;) :
  set_to(return_state,RCDATA_state)
  switch_to(Character_reference_state)
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(RCDATA_less_than_sign_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--RAWTEXT_state--
prev: 
 consume(next_input_character)
trans: 
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(RAWTEXT_less_than_sign_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--Script_data_state--
prev: 
 consume(next_input_character)
trans: 
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Script_data_less_than_sign_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--PLAINTEXT_state--
prev: 
 consume(next_input_character)
trans: 
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--Tag_open_state--
prev: 
 consume(next_input_character)
trans: 
 U+0021 EXCLAMATION MARK (!) :
  switch_to(Markup_declaration_open_state)
 U+002F SOLIDUS (/) :
  switch_to(End_tag_open_state)
 ASCII alpha :
  create(new_start_tag_token)
  set_to(its_tag_name,empty_string)
  reconsume_in(Tag_name_state)
 U+003F QUESTION MARK (?) :
  is(this,unexpected-question-mark-instead-of-tag-name_parse_error)
  create((comment_token,(whose_data,(is(empty_string)))))
  reconsume_in(Bogus_comment_state)
 EOF :
  is(this,eof-before-tag-name_parse_error)
  emit(and((U+003C,character_token(LESS-THAN((SIGN)))),end-of-file_token))
 Anything else :
  is(this,invalid-first-character-of-tag-name_parse_error)
  emit(character_token(U+003C,LESS-THAN_SIGN))
  reconsume_in(Data_state)

--End_tag_open_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII alpha :
  create(new_token(end_tag))
  set_to(its_tag_name,empty_string)
  reconsume_in(Tag_name_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,missing-end-tag-name_parse_error)
  switch_to(Data_state)
 EOF :
  is(this,eof-before-tag-name_parse_error)
  emit(,_and(U+003C_LESS-THAN_SIGN_character_token,U+002F_SOLIDUS_character_token,end-of-file_token))
 Anything else :
  is(this,invalid-first-character-of-tag-name_parse_error)
  create((comment_token,(whose_data,(is(empty_string)))))
  reconsume_in(Bogus_comment_state)

--Tag_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(Before_attribute_name_state)
 U+000A LINE FEED (LF) :
  switch_to(Before_attribute_name_state)
 U+000C FORM FEED (FF) :
  switch_to(Before_attribute_name_state)
 U+0020 SPACE :
  switch_to(Before_attribute_name_state)
 U+002F SOLIDUS (/) :
  switch_to(Self_closing_start_tag_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_tag_token)
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),tag_name(current_tag_token_'s))
 EOF :
  is(this,eof-in-tag_parse_error)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,tag_name(current_tag_token_'s))

--RCDATA_less_than_sign_state--
prev: 
 consume(next_input_character)
trans: 
 U+002F SOLIDUS (/) :
  set_to(temporary_buffer,empty_string)
  switch_to(RCDATA_end_tag_open_state)
 Anything else :
  emit(character_token(U+003C,LESS-THAN_SIGN))
  reconsume_in(RCDATA_state)

--RCDATA_end_tag_open_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII alpha :
  create(new_token(end_tag))
  set_to(its_tag_name,empty_string)
  reconsume_in(RCDATA_end_tag_name_state)
 Anything else :
  emit(and(SIGN_character_token(U+003C_LESS-THAN),U+002F_SOLIDUS_character_token))
  reconsume_in(RCDATA_state)

--RCDATA_end_tag_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000A LINE FEED (LF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000C FORM FEED (FF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+0020 SPACE :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+002F SOLIDUS (/) :
  if_then(is(current_end_tag_token,appropriate_token(end_tag)),switch_to(Self_closing_start_tag_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+003E GREATER-THAN SIGN (&gt;) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),VP(switch_to(Data_state),CC(and),emit(current_tag_token)))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
  append_to(current_input_character,temporary_buffer)
 ASCII lower alpha :
  append_to(current_input_character,tag_name(current_tag_token_'s))
  append_to(current_input_character,temporary_buffer)
 Anything else :
  emit(,_,_and(U+003C_character_token(LESS-THAN_SIGN),U+002F_SOLIDUS_character_token,-LRB-_-RRB-((character_token,for((,of((characters,in(temporary_buffer)))))),in((order,((they,were(added(to(buffer))))))))))
  reconsume_in(RCDATA_state)

--RAWTEXT_less_than_sign_state--
prev: 
 consume(next_input_character)
trans: 
 U+002F SOLIDUS (/) :
  set_to(temporary_buffer,empty_string)
  switch_to(RAWTEXT_end_tag_open_state)
 Anything else :
  emit(character_token(U+003C,LESS-THAN_SIGN))
  reconsume_in(RAWTEXT_state)

--RAWTEXT_end_tag_open_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII alpha :
  create(new_token(end_tag))
  set_to(its_tag_name,empty_string)
  reconsume_in(RAWTEXT_end_tag_name_state)
 Anything else :
  emit(and(SIGN_character_token(U+003C_LESS-THAN),U+002F_SOLIDUS_character_token))
  reconsume_in(RAWTEXT_state)

--RAWTEXT_end_tag_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000A LINE FEED (LF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000C FORM FEED (FF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+0020 SPACE :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+002F SOLIDUS (/) :
  if_then(is(current_end_tag_token,appropriate_token(end_tag)),switch_to(Self_closing_start_tag_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+003E GREATER-THAN SIGN (&gt;) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),VP(switch_to(Data_state),CC(and),emit(current_tag_token)))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
  append_to(current_input_character,temporary_buffer)
 ASCII lower alpha :
  append_to(current_input_character,tag_name(current_tag_token_'s))
  append_to(current_input_character,temporary_buffer)
 Anything else :
  emit(,_,_and(U+003C_character_token(LESS-THAN_SIGN),U+002F_SOLIDUS_character_token,-LRB-_-RRB-((character_token,for((,of((characters,in(temporary_buffer)))))),in((order,((they,were(added(to(buffer))))))))))
  reconsume_in(RAWTEXT_state)

--Script_data_less_than_sign_state--
prev: 
 consume(next_input_character)
trans: 
 U+002F SOLIDUS (/) :
  set_to(temporary_buffer,empty_string)
  switch_to(Script_data_end_tag_open_state)
 U+0021 EXCLAMATION MARK (!) :
  switch_to(Script_data_escape_start_state)
  emit(and(U+003C_LESS-THAN_SIGN_character_token,U+0021_character_token(EXCLAMATION_MARK)))
 Anything else :
  emit(character_token(U+003C,LESS-THAN_SIGN))
  reconsume_in(Script_data_state)

--Script_data_end_tag_open_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII alpha :
  create(new_token(end_tag))
  set_to(its_tag_name,empty_string)
  reconsume_in(Script_data_end_tag_name_state)
 Anything else :
  emit(and(SIGN_character_token(U+003C_LESS-THAN),U+002F_SOLIDUS_character_token))
  reconsume_in(Script_data_state)

--Script_data_end_tag_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000A LINE FEED (LF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000C FORM FEED (FF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+0020 SPACE :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+002F SOLIDUS (/) :
  if_then(is(current_end_tag_token,appropriate_token(end_tag)),switch_to(Self_closing_start_tag_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+003E GREATER-THAN SIGN (&gt;) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),VP(switch_to(Data_state),CC(and),emit(current_tag_token)))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
  append_to(current_input_character,temporary_buffer)
 ASCII lower alpha :
  append_to(current_input_character,tag_name(current_tag_token_'s))
  append_to(current_input_character,temporary_buffer)
 Anything else :
  emit(,_,_and(U+003C_character_token(LESS-THAN_SIGN),U+002F_SOLIDUS_character_token,-LRB-_-RRB-((character_token,for((,of((characters,in(temporary_buffer)))))),in((order,((they,were(added(to(buffer))))))))))
  reconsume_in(Script_data_state)

--Script_data_escape_start_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Script_data_escape_start_dash_state)
  emit(character_token(U+002D_HYPHEN-MINUS))
 Anything else :
  reconsume_in(Script_data_state)

--Script_data_escape_start_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Script_data_escaped_dash_dash_state)
  emit(character_token(U+002D_HYPHEN-MINUS))
 Anything else :
  reconsume_in(Script_data_state)

--Script_data_escaped_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Script_data_escaped_dash_state)
  emit(character_token(U+002D_HYPHEN-MINUS))
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Script_data_escaped_less_than_sign_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  is(this,eof-in-script-html-comment-like-text_parse_error)
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--Script_data_escaped_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Script_data_escaped_dash_dash_state)
  emit(character_token(U+002D_HYPHEN-MINUS))
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Script_data_escaped_less_than_sign_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  switch_to(Script_data_escaped_state)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  is(this,eof-in-script-html-comment-like-text_parse_error)
  emit(end-of-file_token)
 Anything else :
  switch_to(Script_data_escaped_state)
  emit_the_current_input_character_as_a_character_token

--Script_data_escaped_dash_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  emit(character_token(U+002D_HYPHEN-MINUS))
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Script_data_escaped_less_than_sign_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Script_data_state)
  emit(character_token(U+003E,GREATER-THAN_SIGN))
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  switch_to(Script_data_escaped_state)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  is(this,eof-in-script-html-comment-like-text_parse_error)
  emit(end-of-file_token)
 Anything else :
  switch_to(Script_data_escaped_state)
  emit_the_current_input_character_as_a_character_token

--Script_data_escaped_less_than_sign_state--
prev: 
 consume(next_input_character)
trans: 
 U+002F SOLIDUS (/) :
  set_to(temporary_buffer,empty_string)
  switch_to(Script_data_escaped_end_tag_open_state)
 ASCII alpha :
  set_to(temporary_buffer,empty_string)
  emit(character_token(U+003C,LESS-THAN_SIGN))
  reconsume_in(Script_data_double_escape_start_state)
 Anything else :
  emit(character_token(U+003C,LESS-THAN_SIGN))
  reconsume_in(Script_data_escaped_state)

--Script_data_escaped_end_tag_open_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII alpha :
  create(new_token(end_tag))
  set_to(its_tag_name,empty_string)
  reconsume_in(Script_data_escaped_end_tag_name_state)
 Anything else :
  emit(and(SIGN_character_token(U+003C_LESS-THAN),U+002F_SOLIDUS_character_token))
  reconsume_in(Script_data_escaped_state)

--Script_data_escaped_end_tag_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000A LINE FEED (LF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+000C FORM FEED (FF) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+0020 SPACE :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),switch_to(Before_attribute_name_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+002F SOLIDUS (/) :
  if_then(is(current_end_tag_token,appropriate_token(end_tag)),switch_to(Self_closing_start_tag_state))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 U+003E GREATER-THAN SIGN (&gt;) :
  if_then(is(current_token(end_tag),appropriate_token(end_tag)),VP(switch_to(Data_state),CC(and),emit(current_tag_token)))
  otherwise(treat_it_as_per_the_"_anything_else_"_entry_below)
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
  append_to(current_input_character,temporary_buffer)
 ASCII lower alpha :
  append_to(current_input_character,tag_name(current_tag_token_'s))
  append_to(current_input_character,temporary_buffer)
 Anything else :
  emit(,_,_and(U+003C_character_token(LESS-THAN_SIGN),U+002F_SOLIDUS_character_token,-LRB-_-RRB-((character_token,for((,of((characters,in(temporary_buffer)))))),,in((order,((they,were(added(to(buffer))))))))))
  reconsume_in(Script_data_escaped_state)

--Script_data_double_escape_start_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_double_escaped_state))
  otherwise(switch_to(Script_data_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+000A LINE FEED (LF) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_double_escaped_state))
  otherwise(switch_to(Script_data_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+000C FORM FEED (FF) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_double_escaped_state))
  otherwise(switch_to(Script_data_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+0020 SPACE :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_double_escaped_state))
  otherwise(switch_to(Script_data_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+002F SOLIDUS (/) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_double_escaped_state))
  otherwise(switch_to(Script_data_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+003E GREATER-THAN SIGN (&gt;) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_double_escaped_state))
  otherwise(switch_to(Script_data_escaped_state))
  emit_the_current_input_character_as_a_character_token
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
  emit_the_current_input_character_as_a_character_token
 ASCII lower alpha :
  append_to(current_input_character,temporary_buffer)
  emit_the_current_input_character_as_a_character_token
 Anything else :
  reconsume_in(Script_data_escaped_state)

--Script_data_double_escaped_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Script_data_double_escaped_dash_state)
  emit(character_token(U+002D_HYPHEN-MINUS))
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Script_data_double_escaped_less_than_sign_state)
  emit(character_token(U+003C,LESS-THAN_SIGN))
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  is(this,eof-in-script-html-comment-like-text_parse_error)
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--Script_data_double_escaped_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Script_data_double_escaped_dash_dash_state)
  emit(character_token(U+002D_HYPHEN-MINUS))
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Script_data_double_escaped_less_than_sign_state)
  emit(character_token(U+003C,LESS-THAN_SIGN))
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  switch_to(Script_data_double_escaped_state)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  is(this,eof-in-script-html-comment-like-text_parse_error)
  emit(end-of-file_token)
 Anything else :
  switch_to(Script_data_double_escaped_state)
  emit_the_current_input_character_as_a_character_token

--Script_data_double_escaped_dash_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  emit(character_token(U+002D_HYPHEN-MINUS))
 U+003C LESS-THAN SIGN (&lt;) :
  switch_to(Script_data_double_escaped_less_than_sign_state)
  emit(character_token(U+003C,LESS-THAN_SIGN))
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Script_data_state)
  emit(character_token(U+003E,GREATER-THAN_SIGN))
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  switch_to(Script_data_double_escaped_state)
  emit(character_token(U+FFFD_REPLACEMENT_CHARACTER))
 EOF :
  is(this,eof-in-script-html-comment-like-text_parse_error)
  emit(end-of-file_token)
 Anything else :
  switch_to(Script_data_double_escaped_state)
  emit_the_current_input_character_as_a_character_token

--Script_data_double_escaped_less_than_sign_state--
prev: 
 consume(next_input_character)
trans: 
 U+002F SOLIDUS (/) :
  set_to(temporary_buffer,empty_string)
  switch_to(Script_data_double_escape_end_state)
  emit(character_token(U+002F_SOLIDUS))
 Anything else :
  reconsume_in(Script_data_double_escaped_state)

--Script_data_double_escape_end_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_escaped_state))
  otherwise(switch_to(Script_data_double_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+000A LINE FEED (LF) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_escaped_state))
  otherwise(switch_to(Script_data_double_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+000C FORM FEED (FF) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_escaped_state))
  otherwise(switch_to(Script_data_double_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+0020 SPACE :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_escaped_state))
  otherwise(switch_to(Script_data_double_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+002F SOLIDUS (/) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_escaped_state))
  otherwise(switch_to(Script_data_double_escaped_state))
  emit_the_current_input_character_as_a_character_token
 U+003E GREATER-THAN SIGN (&gt;) :
  if_then(is(temporary_buffer,string_"script"),switch_to(Script_data_escaped_state))
  otherwise(switch_to(Script_data_double_escaped_state))
  emit_the_current_input_character_as_a_character_token
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
  emit_the_current_input_character_as_a_character_token
 ASCII lower alpha :
  append_to(current_input_character,temporary_buffer)
  emit_the_current_input_character_as_a_character_token
 Anything else :
  reconsume_in(Script_data_double_escaped_state)

--Before_attribute_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+002F SOLIDUS (/) :
  reconsume_in(After_attribute_name_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  reconsume_in(After_attribute_name_state)
 EOF :
  reconsume_in(After_attribute_name_state)
 U+003D EQUALS SIGN (=) :
  is(this,unexpected-equals-sign-before-attribute-name_parse_error)
  FAIL
  set_to(name(attribute_'s),current_input_character)
  switch_to(Attribute_name_state)
 Anything else :
  FAIL
  set_to(attribute_name_and_value,empty_string)
  reconsume_in(Attribute_name_state)

--Attribute_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  reconsume_in(After_attribute_name_state)
 U+000A LINE FEED (LF) :
  reconsume_in(After_attribute_name_state)
 U+000C FORM FEED (FF) :
  reconsume_in(After_attribute_name_state)
 U+0020 SPACE :
  reconsume_in(After_attribute_name_state)
 U+002F SOLIDUS (/) :
  reconsume_in(After_attribute_name_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  reconsume_in(After_attribute_name_state)
 EOF :
  reconsume_in(After_attribute_name_state)
 U+003D EQUALS SIGN (=) :
  switch_to(Before_attribute_value_state)
 ASCII upper alpha :
  add_0x0020_to_the_character_'s_code_point
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),name(current_attribute_'s))
 U+0022 QUOTATION MARK (") :
  is(this,unexpected-character-in-attribute-name_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 U+0027 APOSTROPHE (') :
  is(this,unexpected-character-in-attribute-name_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 U+003C LESS-THAN SIGN (&lt;) :
  is(this,unexpected-character-in-attribute-name_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 Anything else :
  append_to(current_input_character,name(current_attribute_'s))

--After_attribute_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+002F SOLIDUS (/) :
  switch_to(Self_closing_start_tag_state)
 U+003D EQUALS SIGN (=) :
  switch_to(Before_attribute_value_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_tag_token)
 EOF :
  is(this,eof-in-tag_parse_error)
  emit(end-of-file_token)
 Anything else :
  FAIL
  set_to(attribute_name_and_value,empty_string)
  reconsume_in(Attribute_name_state)

--Before_attribute_value_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+0022 QUOTATION MARK (") :
  switch_to(Attribute_value_double_quoted_state)
 U+0027 APOSTROPHE (') :
  switch_to(Attribute_value_single_quoted_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,missing-attribute-value_parse_error)
  switch_to(Data_state)
  emit(current_tag_token)
 Anything else :
  reconsume_in(Attribute_value_unquoted_state)

--Attribute_value_double_quoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0022 QUOTATION MARK (") :
  switch_to(After_attribute_value_quoted_state)
 U+0026 AMPERSAND (&amp;) :
  set_to(return_state,Attribute_value_double_quoted_state)
  switch_to(Character_reference_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),value(current_attribute_'s))
 EOF :
  is(this,eof-in-tag_parse_error)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,value(current_attribute_'s))

--Attribute_value_single_quoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0027 APOSTROPHE (') :
  switch_to(After_attribute_value_quoted_state)
 U+0026 AMPERSAND (&amp;) :
  set_to(return_state,Attribute_value_single_quoted_state)
  switch_to(Character_reference_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),value(current_attribute_'s))
 EOF :
  is(this,eof-in-tag_parse_error)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,value(current_attribute_'s))

--Attribute_value_unquoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(Before_attribute_name_state)
 U+000A LINE FEED (LF) :
  switch_to(Before_attribute_name_state)
 U+000C FORM FEED (FF) :
  switch_to(Before_attribute_name_state)
 U+0020 SPACE :
  switch_to(Before_attribute_name_state)
 U+0026 AMPERSAND (&amp;) :
  set_to(return_state,Attribute_value_unquoted_state)
  switch_to(Character_reference_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_tag_token)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),value(current_attribute_'s))
 U+0022 QUOTATION MARK (") :
  is(this,unexpected-character-in-unquoted-attribute-value_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 U+0027 APOSTROPHE (') :
  is(this,unexpected-character-in-unquoted-attribute-value_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 U+003C LESS-THAN SIGN (&lt;) :
  is(this,unexpected-character-in-unquoted-attribute-value_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 U+003D EQUALS SIGN (=) :
  is(this,unexpected-character-in-unquoted-attribute-value_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 U+0060 GRAVE ACCENT (`) :
  is(this,unexpected-character-in-unquoted-attribute-value_parse_error)
  treat_it_as_per_the_"_anything_else_"_entry_below
 EOF :
  is(this,eof-in-tag_parse_error)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,value(current_attribute_'s))

--After_attribute_value_quoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(Before_attribute_name_state)
 U+000A LINE FEED (LF) :
  switch_to(Before_attribute_name_state)
 U+000C FORM FEED (FF) :
  switch_to(Before_attribute_name_state)
 U+0020 SPACE :
  switch_to(Before_attribute_name_state)
 U+002F SOLIDUS (/) :
  switch_to(Self_closing_start_tag_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_tag_token)
 EOF :
  is(this,eof-in-tag_parse_error)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-whitespace-between-attributes_parse_error)
  reconsume_in(Before_attribute_name_state)

--Self_closing_start_tag_state--
prev: 
 consume(next_input_character)
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  FAIL
  switch_to(Data_state)
  emit(current_tag_token)
 EOF :
  is(this,eof-in-tag_parse_error)
  emit(end-of-file_token)
 Anything else :
  is(this,unexpected-solidus-in-tag_parse_error)
  reconsume_in(Before_attribute_name_state)

--Bogus_comment_state--
prev: 
 consume(next_input_character)
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(comment_token)
 EOF :
  emit(comment)
  emit(end-of-file_token)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),data(comment_token_'s))
 Anything else :
  append_to(current_input_character,data(comment_token_'s))

--Markup_declaration_open_state--
prev: 
 FAIL
trans: 
 Two U+002D HYPHEN-MINUS characters (-) :
  consume(two_characters)
  create((comment_token,(whose_data,(is(empty_string)))))
  switch_to(Comment_start_state)
 ASCII case-insensitive match for the word "DOCTYPE" :
  consume(characters)
  switch_to(DOCTYPE_state)
 The string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET character before and after) :
  consume(characters)
  if_then(S(is(there,adjusted_current_node),CC(and),S(it,VP(VBZ(is),RB(not),(element,in(HTML_namespace))))),switch_to(CDATA_section_state))
  otherwise
  is(cdata-in-html-content_parse_error)
  create((comment_token,(whose_data,(is("_-LSB-_CDATA_-LSB-_"_string)))))
  switch_to(Bogus_comment_state)
 Anything else :
  is(this,incorrectly-opened-comment_parse_error)
  create((comment_token,(whose_data,(is(empty_string)))))
  switch_to(Bogus_comment_state)
  consume

--Comment_start_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Comment_start_dash_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,abrupt-closing-of-empty-comment_parse_error)
  switch_to(Data_state)
  emit(comment_token)
 Anything else :
  reconsume_in(Comment_state)

--Comment_start_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Comment_end_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,abrupt-closing-of-empty-comment_parse_error)
  switch_to(Data_state)
  emit(comment_token)
 EOF :
  is(this,eof-in-comment_parse_error)
  emit(comment_token)
  emit(end-of-file_token)
 Anything else :
  append_to(-LRB-_-RRB-(character(U+002D_HYPHEN-MINUS),-),data(comment_token_'s))
  reconsume_in(Comment_state)

--Comment_state--
prev: 
 consume(next_input_character)
trans: 
 U+003C LESS-THAN SIGN (&lt;) :
  append_to(current_input_character,data(comment_token_'s))
  switch_to(Comment_less_than_sign_state)
 U+002D HYPHEN-MINUS (-) :
  switch_to(Comment_end_dash_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),data(comment_token_'s))
 EOF :
  is(this,eof-in-comment_parse_error)
  emit(comment_token)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,data(comment_token_'s))

--Comment_less_than_sign_state--
prev: 
 consume(next_input_character)
trans: 
 U+0021 EXCLAMATION MARK (!) :
  append_to(current_input_character,data(comment_token_'s))
  switch_to(Comment_less_than_sign_bang_state)
 U+003C LESS-THAN SIGN (&lt;) :
  append_to(current_input_character,data(comment_token_'s))
 Anything else :
  reconsume_in(Comment_state)

--Comment_less_than_sign_bang_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Comment_less_than_sign_bang_dash_state)
 Anything else :
  reconsume_in(Comment_state)

--Comment_less_than_sign_bang_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Comment_less_than_sign_bang_dash_dash_state)
 Anything else :
  reconsume_in(Comment_end_dash_state)

--Comment_less_than_sign_bang_dash_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  reconsume_in(Comment_end_state)
 EOF :
  reconsume_in(Comment_end_state)
 Anything else :
  is(this,nested-comment_parse_error)
  reconsume_in(Comment_end_state)

--Comment_end_dash_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  switch_to(Comment_end_state)
 EOF :
  is(this,eof-in-comment_parse_error)
  emit(comment_token)
  emit(end-of-file_token)
 Anything else :
  append_to(-LRB-_-RRB-(character(U+002D_HYPHEN-MINUS),-),data(comment_token_'s))
  reconsume_in(Comment_state)

--Comment_end_state--
prev: 
 consume(next_input_character)
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(comment_token)
 U+0021 EXCLAMATION MARK (!) :
  switch_to(Comment_end_bang_state)
 U+002D HYPHEN-MINUS (-) :
  append_to(-LRB-_-RRB-(U+002D_HYPHEN-MINUS_character,-),data(comment_token_'s))
 EOF :
  is(this,eof-in-comment_parse_error)
  emit(comment_token)
  emit(end-of-file_token)
 Anything else :
  append_to(-LRB-_-RRB-(two_U+002D_HYPHEN-MINUS_characters,-),data(comment_token_'s))
  reconsume_in(Comment_state)

--Comment_end_bang_state--
prev: 
 consume(next_input_character)
trans: 
 U+002D HYPHEN-MINUS (-) :
  append_to(and(-LRB-_-RRB-(two_U+002D_HYPHEN-MINUS_characters,-),-LRB-_-EXC-_-RRB-(U+0021_character(EXCLAMATION_MARK))),data(comment_token_'s))
  switch_to(Comment_end_dash_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,incorrectly-closed-comment_parse_error)
  switch_to(Data_state)
  emit(comment_token)
 EOF :
  is(this,eof-in-comment_parse_error)
  emit(comment_token)
  emit(end-of-file_token)
 Anything else :
  FAIL
  FAIL
  reconsume_in(Comment_state)

--DOCTYPE_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(Before_DOCTYPE_name_state)
 U+000A LINE FEED (LF) :
  switch_to(Before_DOCTYPE_name_state)
 U+000C FORM FEED (FF) :
  switch_to(Before_DOCTYPE_name_state)
 U+0020 SPACE :
  switch_to(Before_DOCTYPE_name_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  reconsume_in(Before_DOCTYPE_name_state)
 EOF :
  is(this,eof-in-doctype_parse_error)
  create(new_DOCTYPE_token)
  set_to(its_force-quirks_flag,ADVP(RP(on)))
  emit(token)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-whitespace-before-doctype-name_parse_error)
  reconsume_in(Before_DOCTYPE_name_state)

--Before_DOCTYPE_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 ASCII upper alpha :
  create(new_DOCTYPE_token)
  set_to(name(token_'s),(lowercase_version,of(current_input_character)))
  add_0x0020_to_the_character_'s_code_point
  switch_to(DOCTYPE_name_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  create(new_DOCTYPE_token)
  set_to(name(token_'s),character(U+FFFD_REPLACEMENT_CHARACTER))
  switch_to(DOCTYPE_name_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,missing-doctype-name_parse_error)
  create(new_DOCTYPE_token)
  set_to(its_force-quirks_flag,ADVP(RP(on)))
  switch_to(Data_state)
  emit(token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  create(new_DOCTYPE_token)
  set_to(its_flag(force-quirks()),ADVP(RP(on)))
  emit(token)
  emit(end-of-file_token)
 Anything else :
  create(new_DOCTYPE_token)
  set_to(name(token_'s),current_input_character)
  switch_to(DOCTYPE_name_state)

--DOCTYPE_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(After_DOCTYPE_name_state)
 U+000A LINE FEED (LF) :
  switch_to(After_DOCTYPE_name_state)
 U+000C FORM FEED (FF) :
  switch_to(After_DOCTYPE_name_state)
 U+0020 SPACE :
  switch_to(After_DOCTYPE_name_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_DOCTYPE_token)
 ASCII upper alpha :
  append_to(((lowercase_version,of(current_input_character)),-LRB-_-RRB-((add(0x0020,to(code_point(character_'s)))))),name(current_DOCTYPE_token_'s))
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),name(current_DOCTYPE_token_'s))
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,name(current_DOCTYPE_token_'s))

--After_DOCTYPE_name_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  consume(characters)
  switch_to(After_DOCTYPE_public_keyword_state)
  otherwise
  consume(characters)
  switch_to(After_DOCTYPE_system_keyword_state)
  otherwise
  is(invalid-character-sequence-after-doctype-name_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  reconsume_in(Bogus_DOCTYPE_state)

--After_DOCTYPE_public_keyword_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(Before_DOCTYPE_public_identifier_state)
 U+000A LINE FEED (LF) :
  switch_to(Before_DOCTYPE_public_identifier_state)
 U+000C FORM FEED (FF) :
  switch_to(Before_DOCTYPE_public_identifier_state)
 U+0020 SPACE :
  switch_to(Before_DOCTYPE_public_identifier_state)
 U+0022 QUOTATION MARK (") :
  is(this,missing-whitespace-after-doctype-public-keyword_parse_error)
  set_to(public_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_public_identifier_double_quoted_state)
 U+0027 APOSTROPHE (') :
  is(this,missing-whitespace-after-doctype-public-keyword_parse_error)
  set_to(public_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_public_identifier_single_quoted_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,missing-doctype-public-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-quote-before-doctype-public-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  reconsume_in(Bogus_DOCTYPE_state)

--Before_DOCTYPE_public_identifier_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+0022 QUOTATION MARK (") :
  set_to(public_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_public_identifier_double_quoted_state)
 U+0027 APOSTROPHE (') :
  set_to(public_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_public_identifier_single_quoted_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,missing-doctype-public-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-quote-before-doctype-public-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  reconsume_in(Bogus_DOCTYPE_state)

--DOCTYPE_public_identifier_double_quoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0022 QUOTATION MARK (") :
  switch_to(After_DOCTYPE_public_identifier_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),public_identifier(current_DOCTYPE_token_'s))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,abrupt-doctype-public-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,public_identifier(current_DOCTYPE_token_'s))

--DOCTYPE_public_identifier_single_quoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0027 APOSTROPHE (') :
  switch_to(After_DOCTYPE_public_identifier_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),public_identifier(current_DOCTYPE_token_'s))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,abrupt-doctype-public-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,public_identifier(current_DOCTYPE_token_'s))

--After_DOCTYPE_public_identifier_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(Between_DOCTYPE_public_and_system_identifiers_state)
 U+000A LINE FEED (LF) :
  switch_to(Between_DOCTYPE_public_and_system_identifiers_state)
 U+000C FORM FEED (FF) :
  switch_to(Between_DOCTYPE_public_and_system_identifiers_state)
 U+0020 SPACE :
  switch_to(Between_DOCTYPE_public_and_system_identifiers_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_DOCTYPE_token)
 U+0022 QUOTATION MARK (") :
  is(this,parse_error(missing-whitespace-between-doctype-public-and-system-identifiers))
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_double_quoted_state)
 U+0027 APOSTROPHE (') :
  is(this,parse_error(missing-whitespace-between-doctype-public-and-system-identifiers))
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_single_quoted_state)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-quote-before-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  reconsume_in(Bogus_DOCTYPE_state)

--Between_DOCTYPE_public_and_system_identifiers_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_DOCTYPE_token)
 U+0022 QUOTATION MARK (") :
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_double_quoted_state)
 U+0027 APOSTROPHE (') :
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_single_quoted_state)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-quote-before-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  reconsume_in(Bogus_DOCTYPE_state)

--After_DOCTYPE_system_keyword_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  switch_to(Before_DOCTYPE_system_identifier_state)
 U+000A LINE FEED (LF) :
  switch_to(Before_DOCTYPE_system_identifier_state)
 U+000C FORM FEED (FF) :
  switch_to(Before_DOCTYPE_system_identifier_state)
 U+0020 SPACE :
  switch_to(Before_DOCTYPE_system_identifier_state)
 U+0022 QUOTATION MARK (") :
  is(this,missing-whitespace-after-doctype-system-keyword_parse_error)
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_double_quoted_state)
 U+0027 APOSTROPHE (') :
  is(this,missing-whitespace-after-doctype-system-keyword_parse_error)
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_single_quoted_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,missing-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-quote-before-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  reconsume_in(Bogus_DOCTYPE_state)

--Before_DOCTYPE_system_identifier_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+0022 QUOTATION MARK (") :
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_double_quoted_state)
 U+0027 APOSTROPHE (') :
  set_to(system_identifier(DOCTYPE_token_'s),-LRB-_-RRB-(empty_string,not_missing))
  switch_to(DOCTYPE_system_identifier_single_quoted_state)
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,missing-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  is(this,missing-quote-before-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  reconsume_in(Bogus_DOCTYPE_state)

--DOCTYPE_system_identifier_double_quoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0022 QUOTATION MARK (") :
  switch_to(After_DOCTYPE_system_identifier_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),system_identifier(current_DOCTYPE_token_'s))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,abrupt-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,system_identifier(current_DOCTYPE_token_'s))

--DOCTYPE_system_identifier_single_quoted_state--
prev: 
 consume(next_input_character)
trans: 
 U+0027 APOSTROPHE (') :
  switch_to(After_DOCTYPE_system_identifier_state)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  append_to(character(U+FFFD_REPLACEMENT_CHARACTER),system_identifier(current_DOCTYPE_token_'s))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(this,abrupt-doctype-system-identifier_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  switch_to(Data_state)
  emit(DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  append_to(current_input_character,system_identifier(current_DOCTYPE_token_'s))

--After_DOCTYPE_system_identifier_state--
prev: 
 consume(next_input_character)
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  ignore_the_character
 U+000A LINE FEED (LF) :
  ignore_the_character
 U+000C FORM FEED (FF) :
  ignore_the_character
 U+0020 SPACE :
  ignore_the_character
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(current_DOCTYPE_token)
 EOF :
  is(this,eof-in-doctype_parse_error)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  is(this,unexpected-character-after-doctype-system-identifier_parse_error)
  reconsume_in(Bogus_DOCTYPE_state)
  set_to(force-quirks_flag(DOCTYPE_token_'s),ADVP(RP(on)))

--Bogus_DOCTYPE_state--
prev: 
 consume(next_input_character)
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  switch_to(Data_state)
  emit(DOCTYPE_token)
 U+0000 NULL :
  is(this,unexpected-null-character_parse_error)
  ignore_the_character
 EOF :
  emit(DOCTYPE_token)
  emit(end-of-file_token)
 Anything else :
  ignore_the_character

--CDATA_section_state--
prev: 
 consume(next_input_character)
trans: 
 U+005D RIGHT SQUARE BRACKET (]) :
  switch_to(CDATA_section_bracket_state)
 EOF :
  is(this,eof-in-cdata_parse_error)
  emit(end-of-file_token)
 Anything else :
  emit_the_current_input_character_as_a_character_token

--CDATA_section_bracket_state--
prev: 
 consume(next_input_character)
trans: 
 U+005D RIGHT SQUARE BRACKET (]) :
  switch_to(CDATA_section_end_state)
 Anything else :
  emit(U+005D_RIGHT_SQUARE_BRACKET_character_token)
  reconsume_in(CDATA_section_state)

--CDATA_section_end_state--
prev: 
 consume(next_input_character)
trans: 
 U+005D RIGHT SQUARE BRACKET (]) :
  emit(U+005D_character_token(RIGHT_SQUARE_BRACKET))
 U+003E GREATER-THAN SIGN character :
  switch_to(Data_state)
 Anything else :
  emit(two_U+005D_RIGHT_SQUARE_BRACKET_character_tokens)
  reconsume_in(CDATA_section_state)

--Character_reference_state--
prev: 
 set_to(temporary_buffer,empty_string)
 append_to(U+0026_AMPERSAND_-LRB-_&_amp_;-RRB-_character,temporary_buffer)
 consume(next_input_character)
trans: 
 ASCII alphanumeric :
  reconsume_in(Named_character_reference_state)
 U+0023 NUMBER SIGN (#) :
  append_to(current_input_character,temporary_buffer)
  switch_to(Numeric_character_reference_state)
 Anything else :
  FAIL
  reconsume_in(return_state)

--Named_character_reference_state--
prev: 
 consume
 FAIL
trans: 
 If there is a match :
  is
  is(next_input_character,either_or(-LRB-_=-RRB-(U+003D_EQUALS_SIGN_character),ASCII_alphanumeric))
  switch_to(return_state)
  FAIL
  otherwise
  is
  is(missing-semicolon-after-character-reference_parse_error.Set(temporary_buffer,to(empty_string)))
  append_to(-LRB-_-RRB-((characters(one_or_two),corresponding(to(name(character_reference)))),as((given(by((second_column,of(named_character_references_table))))))),(temporary_buffer.Flush_code_points,consumed(as(character_reference))))
  switch_to(return_state)
 Otherwise :
  FAIL
  switch_to(Ambiguous_ampersand_state)

--Ambiguous_ampersand_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII alphanumeric :
  if_then(S(character_reference,VP(VBD(was),VP(VBN(consumed),PP(IN(as),(part,of(attribute)))))),append_to(current_input_character,value(current_attribute_'s)))
  otherwise(VP(VB(emit),current_input_character,PP(IN(as),character_token)))
 U+003B SEMICOLON (;) :
  is(this,unknown-named-character-reference_parse_error)
  reconsume_in(return_state)
 Anything else :
  reconsume_in(return_state)

--Numeric_character_reference_state--
prev: 
 FAIL
trans: 
 U+0078 LATIN SMALL LETTER X :
  append_to(current_input_character,temporary_buffer)
  switch_to(Hexadecimal_character_reference_start_state)
 U+0058 LATIN CAPITAL LETTER X :
  append_to(current_input_character,temporary_buffer)
  switch_to(Hexadecimal_character_reference_start_state)
 Anything else :
  reconsume_in(Decimal_character_reference_start_state)

--Hexadecimal_character_reference_start_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII hex digit :
  reconsume_in(Hexadecimal_character_reference_state)
 Anything else :
  is(this,absence-of-digits-in-numeric-character-reference_parse_error)
  FAIL
  reconsume_in(return_state)

--Decimal_character_reference_start_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII digit :
  reconsume_in(Decimal_character_reference_state)
 Anything else :
  is(this,absence-of-digits-in-numeric-character-reference_parse_error)
  FAIL
  reconsume_in(return_state)

--Hexadecimal_character_reference_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII digit :
  multiply_the_character_reference_code_by(16)
  FAIL
 ASCII upper hex digit :
  multiply_the_character_reference_code_by(16)
  FAIL
 ASCII lower hex digit :
  multiply_the_character_reference_code_by(16)
  FAIL
 U+003B SEMICOLON :
  switch_to(Numeric_character_reference_end_state)
 Anything else :
  is(this,parse_error(missing-semicolon-after-character-reference))
  reconsume_in(Numeric_character_reference_end_state)

--Decimal_character_reference_state--
prev: 
 consume(next_input_character)
trans: 
 ASCII digit :
  multiply_the_character_reference_code_by(10)
  FAIL
 U+003B SEMICOLON :
  switch_to(Numeric_character_reference_end_state)
 Anything else :
  is(this,parse_error(missing-semicolon-after-character-reference))
  reconsume_in(Numeric_character_reference_end_state)

