state: Data_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0026 AMPERSAND (&amp;)
 set(obj(state(det(the),compound(return))),obl(Data_state(case(to),det(the))))
 switch(obl(Character_reference_state(case(to),det(the))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Tag_open_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: EOF
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: RCDATA_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0026 AMPERSAND (&amp;)
 set(obj(state(det(the),compound(return))),obl(RCDATA_state(case(to),det(the))))
 switch(obl(Character_reference_state(case(to),det(the))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(RCDATA_less_than_sign_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: RAWTEXT_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(RAWTEXT_less_than_sign_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Script_data_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Script_data_less_than_sign_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: PLAINTEXT_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Tag_open_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0021 EXCLAMATION MARK (!)
 switch(obl(Markup_declaration_open_state(case(to),det(the))))
char: U+002F SOLIDUS (/)
 switch(obl(End_tag_open_state(case(to),det(the))))
char: ASCII alpha
 create(obj(token(det(a),amod(new),compound(start),compound(tag))),conj(set(cc(and),obj(name(nmod:poss(its),compound(tag))),obl(string(case(to),det(the),amod(empty))))))
 reconsume(nmod(Tag_name_state(case(in),det(the))))
char: U+003F QUESTION MARK (?)
 error(nsubj(this),cop(is),det(an),amod(unexpected-question-mark-instead-of-tag-name),compound(parse))
 create(obj(token(det(a),compound(comment),acl:relcl(string(nsubj(data(nmod:poss(whose))),cop(is),det(the),amod(empty))))))
 reconsume(nmod(Bogus_comment_state(case(in),det(the))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-before-tag-name),compound(parse))
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(cc(and),det(an),amod(end-of-file))))))
char: Anything else
 error(nsubj(this),cop(is),det(an),amod(invalid-first-character-of-tag-name),compound(parse))
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
 reconsume(nmod(Data_state(case(in),det(the))))
state: End_tag_open_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII alpha
 create(obj(token(det(a),amod(new),compound(end),compound(tag))),conj(set(punct(,),obj(name(nmod:poss(its),compound(tag))),obl(string(case(to),det(the),amod(empty))))))
 reconsume(nmod(Tag_name_state(case(in),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(a),amod(missing-end-tag-name),compound(parse))
 switch(obl(Data_state(case(to),det(the))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-before-tag-name),compound(parse))
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),appos(token(punct(,),det(a),nummod(U+002F),compound(character(compound(SOLIDUS))))),conj(token(cc(and),det(an),amod(end-of-file))))))
char: Anything else
 error(nsubj(this),cop(is),det(an),amod(invalid-first-character-of-tag-name),compound(parse))
 create(obj(token(det(a),compound(comment),acl:relcl(string(nsubj(data(nmod:poss(whose))),cop(is),det(the),amod(empty))))))
 reconsume(nmod(Bogus_comment_state(case(in),det(the))))
state: Tag_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+002F SOLIDUS (/)
 switch(obl(Self_closing_start_tag_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(tag))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-tag),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))
state: RCDATA_less_than_sign_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002F SOLIDUS (/)
 set(obj(buffer(det(the),amod(temporary))),obl(string(case(to),det(the),amod(empty))))
 switch(obl(RCDATA_end_tag_open_state(case(to),det(the))))
char: Anything else
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
 reconsume(nmod(RCDATA_state(case(in),det(the))))
state: RCDATA_end_tag_open_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII alpha
 create(obj(token(det(a),amod(new),compound(end),compound(tag))),conj(set(punct(,),obj(name(nmod:poss(its),compound(tag))),obl(string(case(to),det(the),amod(empty))))))
 reconsume(nmod(RCDATA_end_tag_name_state(case(in),det(the))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(cc(and),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))))))
 reconsume(nmod(RCDATA_state(case(in),det(the))))
state: RCDATA_end_tag_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000A LINE FEED (LF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000C FORM FEED (FF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+0020 SPACE
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+002F SOLIDUS (/)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Self_closing_start_tag_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Data_state(case(to),det(the))),conj(emit(cc(and),obj(token(det(the),amod(current),compound(tag))))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: ASCII lower alpha
 append(obj(character(det(the),amod(current),compound(input))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(punct(,),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))),conj(token(punct(,),cc(and),det(a),compound(character),nmod(each(case(for),nmod(characters(case(of),det(the),nmod(buffer(case(in),det(the),amod(temporary),nmod(order(punct((),case(in),det(the),acl:relcl(added(nsubj:pass(they),aux:pass(were),obl(buffer(case(to),det(the))))),punct()))))))))))))))
 reconsume(nmod(RCDATA_state(case(in),det(the))))
state: RAWTEXT_less_than_sign_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002F SOLIDUS (/)
 set(obj(buffer(det(the),amod(temporary))),obl(string(case(to),det(the),amod(empty))))
 switch(obl(RAWTEXT_end_tag_open_state(case(to),det(the))))
char: Anything else
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
 reconsume(nmod(RAWTEXT_state(case(in),det(the))))
state: RAWTEXT_end_tag_open_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII alpha
 create(obj(token(det(a),amod(new),compound(end),compound(tag))),conj(set(punct(,),obj(name(nmod:poss(its),compound(tag))),obl(string(case(to),det(the),amod(empty))))))
 reconsume(nmod(RAWTEXT_end_tag_name_state(case(in),det(the))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(cc(and),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))))))
 reconsume(nmod(RAWTEXT_state(case(in),det(the))))
state: RAWTEXT_end_tag_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000A LINE FEED (LF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000C FORM FEED (FF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+0020 SPACE
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+002F SOLIDUS (/)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Self_closing_start_tag_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Data_state(case(to),det(the))),conj(emit(cc(and),obj(token(det(the),amod(current),compound(tag))))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: ASCII lower alpha
 append(obj(character(det(the),amod(current),compound(input))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(punct(,),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))),conj(token(punct(,),cc(and),det(a),compound(character),nmod(each(case(for),nmod(characters(case(of),det(the),nmod(buffer(case(in),det(the),amod(temporary),nmod(order(punct((),case(in),det(the),acl:relcl(added(nsubj:pass(they),aux:pass(were),obl(buffer(case(to),det(the))))),punct()))))))))))))))
 reconsume(nmod(RAWTEXT_state(case(in),det(the))))
state: Script_data_less_than_sign_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002F SOLIDUS (/)
 set(obj(buffer(det(the),amod(temporary))),obl(string(case(to),det(the),amod(empty))))
 switch(obl(Script_data_end_tag_open_state(case(to),det(the))))
char: U+0021 EXCLAMATION MARK (!)
 switch(obl(Script_data_escape_start_state(case(to),det(the))))
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(cc(and),det(a),nummod(U+0021),compound(MARK(compound(EXCLAMATION))),compound(character))))))
char: Anything else
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
 reconsume(nmod(Script_data_state(case(in),det(the))))
state: Script_data_end_tag_open_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII alpha
 create(obj(token(det(a),amod(new),compound(end),compound(tag))),conj(set(punct(,),obj(name(nmod:poss(its),compound(tag))),obl(string(case(to),det(the),amod(empty))))))
 reconsume(nmod(Script_data_end_tag_name_state(case(in),det(the))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(cc(and),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))))))
 reconsume(nmod(Script_data_state(case(in),det(the))))
state: Script_data_end_tag_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000A LINE FEED (LF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000C FORM FEED (FF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+0020 SPACE
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+002F SOLIDUS (/)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Self_closing_start_tag_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Data_state(case(to),det(the))),conj(emit(cc(and),obj(token(det(the),amod(current),compound(tag))))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: ASCII lower alpha
 append(obj(character(det(the),amod(current),compound(input))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(punct(,),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))),conj(token(punct(,),cc(and),det(a),compound(character),nmod(each(case(for),nmod(characters(case(of),det(the),nmod(buffer(case(in),det(the),amod(temporary),nmod(order(punct((),case(in),det(the),acl:relcl(added(nsubj:pass(they),aux:pass(were),obl(buffer(case(to),det(the))))),punct()))))))))))))))
 reconsume(nmod(Script_data_state(case(in),det(the))))
state: Script_data_escape_start_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Script_data_escape_start_dash_state(case(to),det(the))))
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: Anything else
 reconsume(nmod(Script_data_state(case(in),det(the))))
state: Script_data_escape_start_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Script_data_escaped_dash_dash_state(case(to),det(the))))
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: Anything else
 reconsume(nmod(Script_data_state(case(in),det(the))))
state: Script_data_escaped_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Script_data_escaped_dash_state(case(to),det(the))))
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Script_data_escaped_less_than_sign_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-script-html-comment-like-text),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Script_data_escaped_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Script_data_escaped_dash_dash_state(case(to),det(the))))
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Script_data_escaped_less_than_sign_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 switch(obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-script-html-comment-like-text),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 switch(obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Script_data_escaped_dash_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Script_data_escaped_less_than_sign_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Script_data_state(case(to),det(the))))
 emit(obj(U+003E(det(a))))
 token(compound(SIGN(amod(gREATER-THAN))),compound(character))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 switch(obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-script-html-comment-like-text),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 switch(obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Script_data_escaped_less_than_sign_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002F SOLIDUS (/)
 set(obj(buffer(det(the),amod(temporary))),obl(string(case(to),det(the),amod(empty))))
 switch(obl(Script_data_escaped_end_tag_open_state(case(to),det(the))))
char: ASCII alpha
 set(obj(buffer(det(the),amod(temporary))),obl(string(case(to),det(the),amod(empty))))
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
 reconsume(nmod(Script_data_double_escape_start_state(case(in),det(the))))
char: Anything else
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
 reconsume(nmod(Script_data_escaped_state(case(in),det(the))))
state: Script_data_escaped_end_tag_open_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII alpha
 create(obj(token(det(a),amod(new),compound(end),compound(tag))),conj(set(punct(,),obj(name(nmod:poss(its),compound(tag))),obl(string(case(to),det(the),amod(empty))))))
 reconsume(nmod(Script_data_escaped_end_tag_name_state(case(in),det(the))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(cc(and),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))))))
 reconsume(nmod(Script_data_escaped_state(case(in),det(the))))
state: Script_data_escaped_end_tag_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000A LINE FEED (LF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+000C FORM FEED (FF)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+0020 SPACE
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Before_attribute_name_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+002F SOLIDUS (/)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Self_closing_start_tag_state(case(to),det(the))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(advcl(token(mark(if),nsubj(token(det(the),amod(current),compound(end),compound(tag))),cop(is),det(an),amod(appropriate),compound(end),compound(tag))),punct(,),advmod(then),obl(Data_state(case(to),det(the))),conj(emit(cc(and),obj(token(det(the),amod(current),compound(tag))))))
 treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: ASCII lower alpha
 append(obj(character(det(the),amod(current),compound(input))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag))))
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
char: Anything else
 emit(obj(token(det(a),nummod(U+003C),amod(LESS-THAN),compound(SIGN),compound(character),conj(token(punct(,),det(a),nummod(U+002F),compound(SOLIDUS),compound(character))),conj(token(punct(,),cc(and),det(a),compound(character),nmod(each(case(for),nmod(characters(case(of),det(the),nmod(buffer(case(in),det(the),amod(temporary),nmod(order(punct((),case(in),det(the),acl:relcl(added(nsubj:pass(they),aux:pass(were),obl(buffer(case(to),det(the))))),punct()))))))))))))))
 reconsume(nmod(Script_data_escaped_state(case(in),det(the))))
state: Script_data_double_escape_start_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_double_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+000A LINE FEED (LF)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_double_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+000C FORM FEED (FF)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_double_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+0020 SPACE
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_double_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+002F SOLIDUS (/)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_double_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_double_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(buffer(case(to),det(the),amod(temporary))))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: ASCII lower alpha
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: Anything else
 reconsume(nmod(Script_data_escaped_state(case(in),det(the))))
state: Script_data_double_escaped_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Script_data_double_escaped_dash_state(case(to),det(the))))
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Script_data_double_escaped_less_than_sign_state(case(to),det(the))))
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-script-html-comment-like-text),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Script_data_double_escaped_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Script_data_double_escaped_dash_dash_state(case(to),det(the))))
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Script_data_double_escaped_less_than_sign_state(case(to),det(the))))
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 switch(obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-script-html-comment-like-text),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 switch(obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Script_data_double_escaped_dash_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 emit(obj(U+002D(det(a))))
 token(compound(character(amod(hYPHEN-MINUS))))
char: U+003C LESS-THAN SIGN (&lt;)
 switch(obl(Script_data_double_escaped_less_than_sign_state(case(to),det(the))))
 emit(obj(token(det(a),amod(LESS-THAN),compound(SIGN(nummod(U+003C))),compound(character))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Script_data_state(case(to),det(the))))
 emit(obj(U+003E(det(a))))
 token(compound(SIGN(amod(gREATER-THAN))),compound(character))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 switch(obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(token(det(a),compound(U+FFFD),compound(CHARACTER(compound(REPLACEMENT))),compound(character))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-script-html-comment-like-text),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 switch(obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: Script_data_double_escaped_less_than_sign_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002F SOLIDUS (/)
 set(obj(buffer(det(the),amod(temporary))),obl(string(case(to),det(the),amod(empty))))
 switch(obl(Script_data_double_escape_end_state(case(to),det(the))))
 emit(obj(token(det(a),nummod(U+002F),compound(SOLIDUS),compound(character))))
char: Anything else
 reconsume(nmod(Script_data_double_escaped_state(case(in),det(the))))
state: Script_data_double_escape_end_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+000A LINE FEED (LF)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+000C FORM FEED (FF)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+0020 SPACE
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+002F SOLIDUS (/)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(advcl("script"(mark(if),nsubj(buffer(det(the),amod(temporary))),cop(is),det(the),compound(string))),punct(,),advmod(then),obl(Script_data_escaped_state(case(to),det(the))))
 switch(advmod(otherwise),punct(,),obl(Script_data_double_escaped_state(case(to),det(the))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(buffer(case(to),det(the),amod(temporary))))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: ASCII lower alpha
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: Anything else
 reconsume(nmod(Script_data_double_escaped_state(case(in),det(the))))
state: Before_attribute_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+002F SOLIDUS (/)
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: EOF
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+003D EQUALS SIGN (=)
 error(nsubj(this),cop(is),det(an),amod(unexpected-equals-sign-before-attribute-name),compound(parse))
 start(obj(attribute(det(a),amod(new),nmod(token(case(in),det(the),amod(current),compound(tag))))))
 set(obj(name(nmod:poss(attribute(det(that),case('s))),conj(value(punct(,),cc(and),nmod:poss(its),nmod(string(case(to),det(the),amod(empty))))))),obl(character(case(to),det(the),amod(current),compound(input))))
 switch(obl(Attribute_name_state(case(to),det(the))))
char: Anything else
 start(obj(attribute(det(a),amod(new),nmod(token(case(in),det(the),amod(current),compound(tag))))))
 set(obj(name(det(that),compound(attribute),conj(value(cc(and))))),obl(string(case(to),det(the),amod(empty))))
 reconsume(nmod(Attribute_name_state(case(in),det(the))))
state: Attribute_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+000A LINE FEED (LF)
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+000C FORM FEED (FF)
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+0020 SPACE
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+002F SOLIDUS (/)
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: EOF
 reconsume(nmod(After_attribute_name_state(case(in),det(the))))
char: U+003D EQUALS SIGN (=)
 switch(obl(Before_attribute_value_state(case(to),det(the))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(name(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(name(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
char: U+0022 QUOTATION MARK (")
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-attribute-name),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+0027 APOSTROPHE (')
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-attribute-name),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+003C LESS-THAN SIGN (&lt;)
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-attribute-name),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(name(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
state: After_attribute_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+002F SOLIDUS (/)
 switch(obl(Self_closing_start_tag_state(case(to),det(the))))
char: U+003D EQUALS SIGN (=)
 switch(obl(Before_attribute_value_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(tag))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-tag),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 start(obj(attribute(det(a),amod(new),nmod(token(case(in),det(the),amod(current),compound(tag))))))
 set(obj(name(det(that),compound(attribute),conj(value(cc(and))))),obl(string(case(to),det(the),amod(empty))))
 reconsume(nmod(Attribute_name_state(case(in),det(the))))
state: Before_attribute_value_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+0022 QUOTATION MARK (")
 switch(obl(Attribute_value_double_quoted_state(case(to),det(the))))
char: U+0027 APOSTROPHE (')
 switch(obl(Attribute_value_single_quoted_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(a),amod(missing-attribute-value),compound(parse))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(tag))))
char: Anything else
 reconsume(nmod(Attribute_value_unquoted_state(case(in),det(the))))
state: Attribute_value_double_quoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0022 QUOTATION MARK (")
 switch(obl(After_attribute_value_quoted_state(case(to),det(the))))
char: U+0026 AMPERSAND (&amp;)
 set(obj(state(det(the),compound(return))),obl(Attribute_value_double_quoted_state(case(to),det(the))))
 switch(obl(Character_reference_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(value(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-tag),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(value(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
state: Attribute_value_single_quoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0027 APOSTROPHE (')
 switch(obl(After_attribute_value_quoted_state(case(to),det(the))))
char: U+0026 AMPERSAND (&amp;)
 set(obj(state(det(the),compound(return))),obl(Attribute_value_single_quoted_state(case(to),det(the))))
 switch(obl(Character_reference_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(value(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-tag),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(value(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
state: Attribute_value_unquoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+0026 AMPERSAND (&amp;)
 set(obj(state(det(the),compound(return))),obl(Attribute_value_unquoted_state(case(to),det(the))))
 switch(obl(Character_reference_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(tag))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(value(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
char: U+0022 QUOTATION MARK (")
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+0027 APOSTROPHE (')
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+003C LESS-THAN SIGN (&lt;)
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+003D EQUALS SIGN (=)
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: U+0060 GRAVE ACCENT (`)
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse))
 treat(obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-tag),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(value(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
state: After_attribute_value_quoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(Before_attribute_name_state(case(to),det(the))))
char: U+002F SOLIDUS (/)
 switch(obl(Self_closing_start_tag_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(tag))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-tag),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-between-attributes),compound(parse))
 reconsume(nmod(Before_attribute_name_state(case(in),det(the))))
state: Self_closing_start_tag_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003E GREATER-THAN SIGN (&gt;)
 set(obj(flag(det(the),compound(self-closing),nmod(token(case(of),det(the),amod(current),compound(tag))))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(tag))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-tag),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(an),amod(unexpected-solidus-in-tag),compound(parse))
 reconsume(nmod(Before_attribute_name_state(case(in),det(the))))
state: Bogus_comment_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),compound(comment))))
char: EOF
 emit(obj(comment(det(the))))
 emit(obj(token(det(an),amod(end-of-file))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
state: Markup_declaration_open_state
prev: 
 are(mark(if),nsubj(characters(det(the),amod(next),amod(few))))
trans: 
char: Two U+002D HYPHEN-MINUS characters (-)
 consume(obj(characters(det(those),nummod(two))),conj(create(punct(,),obj(token(det(a),compound(comment),acl:relcl(string(nsubj(data(nmod:poss(whose))),cop(is),det(the),amod(empty))))))),conj(switch(punct(,),cc(and),obl(Comment_start_state(case(to),det(the))))))
char: ASCII case-insensitive match for the word "DOCTYPE"
 consume(obj(characters(det(those))),conj(switch(cc(and),obl(DOCTYPE_state(case(to),det(the))))))
char: The string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET character before and after)
 consume(obj(characters(det(those))))
 switch(advcl(is(mark(if),expl(there),nsubj(node(det(an),amod(adjusted),amod(current))),conj(element(cc(and),nsubj(it),cop(is),advmod(not),det(an),nmod(namespace(case(in),det(the),compound(HTML))))))),punct(,),advmod(then),obl(CDATA_section_state(case(to),det(the))))
 error(advmod(otherwise),punct(,),nsubj(this),cop(is),det(a),amod(cdata-in-html-content),compound(parse))
 create(obj(token(det(a),compound(comment),acl:relcl(string(nsubj(data(nmod:poss(whose))),cop(is),det(the),punct("),compound(CDATA(punct([),punct([),punct("))))))))
 switch(obl(Bogus_comment_state(case(to),det(the))))
char: Anything else
 error(nsubj(this),cop(is),det(an),amod(incorrectly-opened-comment),compound(parse))
 create(obj(token(det(a),compound(comment),acl:relcl(string(nsubj(data(nmod:poss(whose))),cop(is),det(the),amod(empty))))))
 switch(obl(Bogus_comment_state(case(to),det(the))),parataxis(consume(punct((),aux(do),advmod(n't),obj(anything(nmod(state(case(in),det(the),amod(current))))),punct()))))
state: Comment_start_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Comment_start_dash_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(an),amod(abrupt-closing-of-empty-comment),compound(parse))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),compound(comment))))
char: Anything else
 reconsume(nmod(Comment_state(case(in),det(the))))
state: Comment_start_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Comment_end_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(an),amod(abrupt-closing-of-empty-comment),compound(parse))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),compound(comment))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-comment),compound(parse))
 emit(obj(token(det(the),compound(comment))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(U+002D(det(a))))
 character(amod(hYPHEN-MINUS),punct((),punct(-),punct()),nmod(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
 reconsume(nmod(Comment_state(case(in),det(the))))
state: Comment_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003C LESS-THAN SIGN (&lt;)
 append(obj(character(det(the),amod(current),compound(input))),obl(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
 switch(obl(Comment_less_than_sign_state(case(to),det(the))))
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Comment_end_dash_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-comment),compound(parse))
 emit(obj(token(det(the),compound(comment))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
state: Comment_less_than_sign_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0021 EXCLAMATION MARK (!)
 append(obj(character(det(the),amod(current),compound(input))),obl(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
 switch(obl(Comment_less_than_sign_bang_state(case(to),det(the))))
char: U+003C LESS-THAN SIGN (&lt;)
 append(obj(character(det(the),amod(current),compound(input))),obl(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
char: Anything else
 reconsume(nmod(Comment_state(case(in),det(the))))
state: Comment_less_than_sign_bang_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Comment_less_than_sign_bang_dash_state(case(to),det(the))))
char: Anything else
 reconsume(nmod(Comment_state(case(in),det(the))))
state: Comment_less_than_sign_bang_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Comment_less_than_sign_bang_dash_dash_state(case(to),det(the))))
char: Anything else
 reconsume(nmod(Comment_end_dash_state(case(in),det(the))))
state: Comment_less_than_sign_bang_dash_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003E GREATER-THAN SIGN (&gt;)
 reconsume(nmod(Comment_end_state(case(in),det(the))))
char: EOF
 reconsume(nmod(Comment_end_state(case(in),det(the))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(nested-comment),compound(parse))
 reconsume(nmod(Comment_end_state(case(in),det(the))))
state: Comment_end_dash_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 switch(obl(Comment_end_state(case(to),det(the))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-comment),compound(parse))
 emit(obj(token(det(the),compound(comment))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(U+002D(det(a))))
 character(amod(hYPHEN-MINUS),punct((),punct(-),punct()),nmod(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
 reconsume(nmod(Comment_state(case(in),det(the))))
state: Comment_end_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),compound(comment))))
char: U+0021 EXCLAMATION MARK (!)
 switch(obl(Comment_end_bang_state(case(to),det(the))))
char: U+002D HYPHEN-MINUS (-)
 append(obj(U+002D(det(a))))
 character(amod(hYPHEN-MINUS),punct((),punct(-),punct()),nmod(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-comment),compound(parse))
 emit(obj(token(det(the),compound(comment))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(U+002D(nummod(two))))
 characters(amod(hYPHEN-MINUS),punct((),punct(-),punct()),nmod(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
 reconsume(nmod(Comment_state(case(in),det(the))))
state: Comment_end_bang_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+002D HYPHEN-MINUS (-)
 append(obj(U+002D(nummod(two))))
 characters(amod(hYPHEN-MINUS),punct((),punct(-),punct()),conj(character(cc(and),det(a),compound(MARK(nummod(U+0021),compound(EXCLAMATION))),appos(-EXC-(punct((),punct()))),nmod(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))))
 switch(obl(Comment_end_dash_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(an),amod(incorrectly-closed-comment),compound(parse))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),compound(comment))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-comment),compound(parse))
 emit(obj(token(det(the),compound(comment))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(U+002D(nummod(two))))
 characters(amod(hYPHEN-MINUS),punct((),punct(-),punct()),conj(MARK(cc(and),nummod(U+0021),compound(EXCLAMATION))),conj(character(det(a),punct(!))),punct((),punct()),nmod(data(case(to),nmod:poss(token(det(the),compound(comment),case('s))))))
 reconsume(nmod(Comment_state(case(in),det(the))))
state: DOCTYPE_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(Before_DOCTYPE_name_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(Before_DOCTYPE_name_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(Before_DOCTYPE_name_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(Before_DOCTYPE_name_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 reconsume(nmod(Before_DOCTYPE_name_state(case(in),det(the))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 create(obj(token(det(a),amod(new),compound(DOCTYPE))))
 set(obj(flag(nmod:poss(its),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(the))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-before-doctype-name),compound(parse))
 reconsume(nmod(Before_DOCTYPE_name_state(case(in),det(the))))
state: Before_DOCTYPE_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: ASCII upper alpha
 create(obj(token(det(a),amod(new),compound(DOCTYPE))))
 set(obj(name(nmod:poss(token(det(the),case('s))))),obl(version(case(to),det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()))))
 switch(obl(DOCTYPE_name_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 create(obj(token(det(a),amod(new),compound(DOCTYPE))))
 set(obj(name(nmod:poss(token(det(the),case('s))))),obl(character(case(to),det(a),compound(U+FFFD),compound(REPLACEMENT),compound(CHARACTER))))
 switch(obl(DOCTYPE_name_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(a),amod(missing-doctype-name),compound(parse))
 create(obj(token(det(a),amod(new),compound(DOCTYPE))))
 set(obj(flag(nmod:poss(its),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 create(obj(token(det(a),amod(new),compound(DOCTYPE))))
 set(obj(flag(nmod:poss(its),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(the))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 create(obj(token(det(a),amod(new),compound(DOCTYPE))))
 set(obj(name(nmod:poss(token(det(the),case('s))))),obl(character(case(to),det(the),amod(current),compound(input))))
 switch(obl(DOCTYPE_name_state(case(to),det(the))))
state: DOCTYPE_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(After_DOCTYPE_name_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(After_DOCTYPE_name_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(After_DOCTYPE_name_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(After_DOCTYPE_name_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(DOCTYPE))))
char: ASCII upper alpha
 append(obj(version(det(the),amod(lowercase),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(add(punct((),obj(0x0020),obl(point(case(to),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))))))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(name(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))))))
state: After_DOCTYPE_name_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 consume(advcl(match(mark(if),nsubj(characters(det(the),nummod(six),acl(starting(obl(character(case(from),det(the),amod(current),compound(input))))))),cop(are),det(an),compound(ASCII),amod(case-insensitive),nmod(word(case(for),det(the),appos(PUBLIC(punct("),punct("))))))),punct(,),advmod(then),obj(characters(det(those))),conj(switch(cc(and),obl(After_DOCTYPE_public_keyword_state(case(to),det(the))))))
 consume(advmod(otherwise),punct(,),advcl(match(mark(if),nsubj(characters(det(the),nummod(six),acl(starting(obl(character(case(from),det(the),amod(current),compound(input))))))),cop(are),det(an),compound(ASCII),amod(case-insensitive),nmod(word(case(for),det(the),appos(SYSTEM(punct("),punct("))))))),punct(,),advmod(then),obj(characters(det(those))),conj(switch(cc(and),obl(After_DOCTYPE_system_keyword_state(case(to),det(the))))))
 error(advmod(otherwise),punct(,),nsubj(this),cop(is),det(an),amod(invalid-character-sequence-after-doctype-name),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
state: After_DOCTYPE_public_keyword_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(Before_DOCTYPE_public_identifier_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(Before_DOCTYPE_public_identifier_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(Before_DOCTYPE_public_identifier_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(Before_DOCTYPE_public_identifier_state(case(to),det(the))))
char: U+0022 QUOTATION MARK (")
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-after-doctype-public-keyword),compound(parse))
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),amod(public))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_public_identifier_double_quoted_state(case(to),det(the))))))
char: U+0027 APOSTROPHE (')
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-after-doctype-public-keyword),compound(parse))
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),amod(public))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_public_identifier_single_quoted_state(case(to),det(the))))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(a),amod(missing-doctype-public-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-quote-before-doctype-public-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
state: Before_DOCTYPE_public_identifier_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+0022 QUOTATION MARK (")
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),amod(public))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_public_identifier_double_quoted_state(case(to),det(the))))))
char: U+0027 APOSTROPHE (')
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),amod(public))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_public_identifier_single_quoted_state(case(to),det(the))))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(a),amod(missing-doctype-public-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-quote-before-doctype-public-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
state: DOCTYPE_public_identifier_double_quoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0022 QUOTATION MARK (")
 switch(obl(After_DOCTYPE_public_identifier_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(an),amod(abrupt-doctype-public-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public))))
state: DOCTYPE_public_identifier_single_quoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0027 APOSTROPHE (')
 switch(obl(After_DOCTYPE_public_identifier_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(an),amod(abrupt-doctype-public-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public))))
state: After_DOCTYPE_public_identifier_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(Between_DOCTYPE_public_and_system_identifiers_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(Between_DOCTYPE_public_and_system_identifiers_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(Between_DOCTYPE_public_and_system_identifiers_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(Between_DOCTYPE_public_and_system_identifiers_state(case(to),det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(DOCTYPE))))
char: U+0022 QUOTATION MARK (")
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-between-doctype-public-and-system-identifiers),compound(parse))
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_double_quoted_state(case(to),det(the))))))
char: U+0027 APOSTROPHE (')
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-between-doctype-public-and-system-identifiers),compound(parse))
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_single_quoted_state(case(to),det(the))))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
state: Between_DOCTYPE_public_and_system_identifiers_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(DOCTYPE))))
char: U+0022 QUOTATION MARK (")
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_double_quoted_state(case(to),det(the))))))
char: U+0027 APOSTROPHE (')
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_single_quoted_state(case(to),det(the))))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
state: After_DOCTYPE_system_keyword_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 switch(obl(Before_DOCTYPE_system_identifier_state(case(to),det(the))))
char: U+000A LINE FEED (LF)
 switch(obl(Before_DOCTYPE_system_identifier_state(case(to),det(the))))
char: U+000C FORM FEED (FF)
 switch(obl(Before_DOCTYPE_system_identifier_state(case(to),det(the))))
char: U+0020 SPACE
 switch(obl(Before_DOCTYPE_system_identifier_state(case(to),det(the))))
char: U+0022 QUOTATION MARK (")
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-after-doctype-system-keyword),compound(parse))
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_double_quoted_state(case(to),det(the))))))
char: U+0027 APOSTROPHE (')
 error(nsubj(this),cop(is),det(a),amod(missing-whitespace-after-doctype-system-keyword),compound(parse))
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_single_quoted_state(case(to),det(the))))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(a),amod(missing-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
state: Before_DOCTYPE_system_identifier_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+0022 QUOTATION MARK (")
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_double_quoted_state(case(to),det(the))))))
char: U+0027 APOSTROPHE (')
 set(obj(identifier(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(system))),obl(string(case(to),det(the),amod(empty),appos(missing(punct((),advmod(not),punct()))))),conj(switch(punct(,),advmod(then),obl(DOCTYPE_system_identifier_single_quoted_state(case(to),det(the))))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(a),amod(missing-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
state: DOCTYPE_system_identifier_double_quoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0022 QUOTATION MARK (")
 switch(obl(After_DOCTYPE_system_identifier_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(an),amod(abrupt-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system))))
state: DOCTYPE_system_identifier_single_quoted_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0027 APOSTROPHE (')
 switch(obl(After_DOCTYPE_system_identifier_state(case(to),det(the))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 append(obj(character(det(a),compound(CHARACTER(compound(REPLACEMENT(compound(U+FFFD))))))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system))))
char: U+003E GREATER-THAN SIGN (&gt;)
 error(nsubj(this),cop(is),det(an),amod(abrupt-doctype-system-identifier),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(that),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 append(obj(character(det(the),amod(current),compound(input))),obl(identifier(case(to),nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system))))
state: After_DOCTYPE_system_identifier_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+0009 CHARACTER TABULATION (tab)
 ignore(obj(character(det(the))))
char: U+000A LINE FEED (LF)
 ignore(obj(character(det(the))))
char: U+000C FORM FEED (FF)
 ignore(obj(character(det(the))))
char: U+0020 SPACE
 ignore(obj(character(det(the))))
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),amod(current),compound(DOCTYPE))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-doctype),compound(parse))
 set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
 emit(obj(token(det(that),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 error(nsubj(this),cop(is),det(an),amod(unexpected-character-after-doctype-system-identifier),compound(parse))
 reconsume(nmod(Bogus_DOCTYPE_state(case(in),det(the))))
 set(punct((),nsubj(This),aux(does),advmod(not),obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))),punct(.),punct()))
state: Bogus_DOCTYPE_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+003E GREATER-THAN SIGN (&gt;)
 switch(obl(Data_state(case(to),det(the))))
 emit(obj(token(det(the),compound(DOCTYPE))))
char: U+0000 NULL
 error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
 ignore(obj(character(det(the))))
char: EOF
 emit(obj(token(det(the),compound(DOCTYPE))))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 ignore(obj(character(det(the))))
state: CDATA_section_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+005D RIGHT SQUARE BRACKET (])
 switch(obl(CDATA_section_bracket_state(case(to),det(the))))
char: EOF
 error(nsubj(this),cop(is),det(an),amod(eof-in-cdata),compound(parse))
 emit(obj(token(det(an),amod(end-of-file))))
char: Anything else
 emit(obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
state: CDATA_section_bracket_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+005D RIGHT SQUARE BRACKET (])
 switch(obl(CDATA_section_end_state(case(to),det(the))))
char: Anything else
 emit(obj(token(det(a),nummod(U+005D),amod(RIGHT),compound(SQUARE),compound(BRACKET),compound(character))))
 reconsume(nmod(CDATA_section_state(case(in),det(the))))
state: CDATA_section_end_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: U+005D RIGHT SQUARE BRACKET (])
 emit(obj(token(det(a),nummod(U+005D),amod(RIGHT),compound(SQUARE),compound(BRACKET),compound(character))))
char: U+003E GREATER-THAN SIGN character
 switch(obl(Data_state(case(to),det(the))))
char: Anything else
 emit(obj(tokens(nummod(two),nummod(U+005D),amod(RIGHT),compound(SQUARE),compound(BRACKET),compound(character))))
 reconsume(nmod(CDATA_section_state(case(in),det(the))))
state: Character_reference_state
prev: 
 set(obj(buffer(det(the),amod(temporary))),obl(string(case(to),det(the),amod(empty))))
 append(obj(AMPERSAND(nummod(U+0026),punct((),conj(amp(cc(&))),conj(character(det(a),compound(;)),nmod(buffer(case(to),det(the),amod(temporary))))))))
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII alphanumeric
 reconsume(nmod(Named_character_reference_state(case(in),det(the))))
char: U+0023 NUMBER SIGN (#)
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
 switch(obl(Numeric_character_reference_state(case(to),det(the))))
char: Anything else
 flush(obj(points(compound(code),acl(consumed(obl(reference(case(as),det(a),compound(character))))))))
 reconsume(nmod(state(case(in),det(the),compound(return))))
state: Named_character_reference_state
prev: 
 consume(obj(number(det(the),amod(maximum),nmod(characters(case(of),amod(possible))))),advcl(one(punct(,),mark(where),nsubj(characters(det(the),amod(consumed))),cop(are),nmod(identifiers(case(of),det(the),nmod(column(case(in),det(the),amod(first),nmod(table(case(of),det(the),amod(named),compound(references(compound(character))))))))))))
 append(obj(character(det(each))),obl(buffer(case(to),det(the),amod(temporary))),advcl(consumed(mark(when),nsubj:pass(it),aux:pass('s))))
trans: 
char: If there is a match
 character(advcl(consumed(mark(if),nsubj:pass(reference(det(the),compound(character))),aux:pass(was),obl(part(case(as),nmod(attribute(case(of),det(an))))))),punct(,),cc(and),nsubj(character(det(the),amod(last),acl(matched))),cop(is),advmod(not),det(a),nummod(U+003B),compound(SEMICOLON),discourse(;)(punct(())),conj(character(punct(,),cc(and),nsubj(character(det(the),amod(next),compound(input))),cop(is),cc:preconj(either),det(a),compound(EQUALS(nummod(U+003D))),compound(SIGN),appos(=)(punct((),conj(alphanumeric(cc(or),det(an),compound(ASCII))))),punct(,))),parataxis(flush(advmod(then(punct(,))),obl(reasons(case(for),amod(historical))),punct(,),obj(points(compound(code),acl(consumed(obl(reference(case(as),det(a),compound(character),conj(switch(cc(and))),nmod(state(case(to),det(the),compound(return))))))))))))
 error.Set(advmod(Otherwise),punct(:),advcl(character(csubj(matched(mark(If),nsubj(character(det(the),amod(last))))),cop(is),advmod(not),det(a),nummod(U+003B),compound(SEMICOLON))),discourse(;)),nsubj(parse(punct((),punct(,),advmod(then),nsubj(this),cop(is),det(a),amod(missing-semicolon-after-character-reference))),obj(buffer(det(the),amod(temporary),nmod(string(case(to),det(the),amod(empty))))))
 append(obj(characters(nummod(one(conj(two(cc(or))))),acl(corresponding(obl(name(case(to),det(the),compound(reference(compound(character))))),advcl(given(punct((),mark(as),obl(column(case(by),det(the),amod(second),nmod(table(case(of),det(the),amod(named),compound(references(compound(character))))))),punct()))),obl(points(case(to),det(the),amod(temporary),compound(buffer.Flush),compound(code),acl(consumed(obl(reference(case(as),det(a),compound(character))))))))))))
 switch(obl(state(case(to),det(the),compound(return))))
char: Otherwise
 flush(obj(points(compound(code),acl(consumed(obl(reference(case(as),det(a),compound(character))))))))
 switch(obl(Ambiguous_ampersand_state(case(to),det(the))))
state: Ambiguous_ampersand_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII alphanumeric
 append(advcl(consumed(mark(if),nsubj:pass(reference(det(the),compound(character))),aux:pass(was),obl(part(case(as),nmod(attribute(case(of),det(an))))),punct(,))),advmod(then),obj(character(det(the),amod(current),compound(input))),obl(value(case(to),nmod:poss(attribute(det(the),amod(current),case('s))))))
 emit(advmod(otherwise),punct(,),obj(character(det(the),amod(current),compound(input))),obl(token(case(as),det(a),compound(character))))
char: U+003B SEMICOLON (;)
 error(nsubj(this),cop(is),det(an),amod(unknown-named-character-reference),compound(parse))
 reconsume(nmod(state(case(in),det(the),compound(return))))
char: Anything else
 reconsume(nmod(state(case(in),det(the),compound(return))))
state: Numeric_character_reference_state
prev: 
 set(obj(code(det(the),compound(character),compound(reference),nmod(zero(case(to))))),parataxis(0).Consume(punct((),obj(character(det(the),amod(next),compound(input))))))
trans: 
char: U+0078 LATIN SMALL LETTER X
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
 switch(obl(Hexadecimal_character_reference_start_state(case(to),det(the))))
char: U+0058 LATIN CAPITAL LETTER X
 append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
 switch(obl(Hexadecimal_character_reference_start_state(case(to),det(the))))
char: Anything else
 reconsume(nmod(Decimal_character_reference_start_state(case(in),det(the))))
state: Hexadecimal_character_reference_start_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII hex digit
 reconsume(nmod(Hexadecimal_character_reference_state(case(in),det(the))))
char: Anything else
 error(nsubj(this),cop(is),det(an),amod(absence-of-digits-in-numeric-character-reference),compound(parse))
 flush(obj(points(compound(code),acl(consumed(obl(reference(case(as),det(a),compound(character))))))))
 reconsume(nmod(state(case(in),det(the),compound(return))))
state: Decimal_character_reference_start_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII digit
 reconsume(nmod(Decimal_character_reference_state(case(in),det(the))))
char: Anything else
 error(nsubj(this),cop(is),det(an),amod(absence-of-digits-in-numeric-character-reference),compound(parse))
 flush(obj(points(compound(code),acl(consumed(obl(reference(case(as),det(a),compound(character))))))))
 reconsume(nmod(state(case(in),det(the),compound(return))))
state: Hexadecimal_character_reference_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII digit
 multiply(obj(code(det(the),compound(character),compound(reference))),obl(16(case(by))))
 add(obj(version(det(a),amod(numeric),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(subtract(punct((),obj(0x0030),obl(point(case(from),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(code(case(to),det(the),compound(character),compound(reference))))))
char: ASCII upper hex digit
 multiply(obj(code(det(the),compound(character),compound(reference))),obl(16(case(by))))
 add(obj(version(det(a),amod(numeric),nmod(character(case(of),det(the),amod(current),compound(input))))),obl(digit(case(as),det(a),amod(hexadecimal))),parataxis(subtract(punct((),obj(0x0037),obl(point(case(from),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(code(case(to),det(the),compound(character),compound(reference))))))
char: ASCII lower hex digit
 multiply(obj(code(det(the),compound(character),compound(reference))),obl(16(case(by))))
 add(obj(version(det(a),amod(numeric),nmod(character(case(of),det(the),amod(current),compound(input))))),obl(digit(case(as),det(a),amod(hexadecimal))),parataxis(subtract(punct((),obj(0x0057),obl(point(case(from),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(code(case(to),det(the),compound(character),compound(reference))))))
char: U+003B SEMICOLON
 switch(obl(Numeric_character_reference_end_state(case(to),det(the))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-semicolon-after-character-reference),compound(parse))
 reconsume(nmod(Numeric_character_reference_end_state(case(in),det(the))))
state: Decimal_character_reference_state
prev: 
 consume(obj(character(det(the),amod(next),compound(input))))
trans: 
char: ASCII digit
 multiply(obj(code(det(the),compound(character),compound(reference))),obl(10(case(by))))
 add(obj(version(det(a),amod(numeric),nmod(character(case(of),det(the),amod(current),compound(input))))),parataxis(subtract(punct((),obj(0x0030),obl(point(case(from),nmod:poss(character(det(the),case('s))),compound(code))),punct()),obl(code(case(to),det(the),compound(character),compound(reference))))))
char: U+003B SEMICOLON
 switch(obl(Numeric_character_reference_end_state(case(to),det(the))))
char: Anything else
 error(nsubj(this),cop(is),det(a),amod(missing-semicolon-after-character-reference),compound(parse))
 reconsume(nmod(Numeric_character_reference_end_state(case(in),det(the))))
