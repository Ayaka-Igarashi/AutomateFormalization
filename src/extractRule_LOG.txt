===========start============

------------------
rule: 
term: 
switch(X0)
------------------
leafCount == 0

------------------
rule: 
term: 
switch(obl(z0))
------------------
leafCount == 0

------------------
rule: 
term: 
switch(obl(Data_state(case(to),det(the))))
------------------
add
fin

===========start============

------------------
rule: 
term: 
set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
------------------
add

------------------
rule: 
set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))
term: 
set(obj(flag(nmod:poss(z0),compound(force-quirks))),obl(on(case(to))))
------------------
children: 
set(obj(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks))),obl(on(case(to))))

------------------
rule: 
set(obj(flag(nmod:poss(z0),compound(force-quirks))),obl(on(case(to))))
term: 
set(obj(z0),obl(z1))
------------------
leafCount == 0

------------------
rule: 
set(obj(flag(nmod:poss(z0),compound(force-quirks))),obl(on(case(to))))
term: 
set(obj(z0),obl(z1),z2)
------------------
leafCount == 0

------------------
rule: 
set(obj(flag(nmod:poss(z0),compound(force-quirks))),obl(on(case(to))))
term: 
set(X0)
------------------
leafCount == 0

------------------
rule: 
set(obj(flag(nmod:poss(z0),compound(force-quirks))),obl(on(case(to))))
term: 
set(obj(z0),z1)
------------------
leafCount == 0
fin

===========start============

------------------
rule: 
term: 
create(X0)
------------------
leafCount == 0

------------------
rule: 
term: 
create(obj(token(det(a),z0,z1)))
------------------
add
fin

===========start============

------------------
rule: 
term: 
reconsume(nmod(z0))
------------------
leafCount == 0

------------------
rule: 
term: 
reconsume(nmod(After_attribute_name_state(case(in),det(the))))
------------------
add

------------------
rule: 
reconsume(nmod(After_attribute_name_state(case(in),det(the))))
term: 
reconsume(nmod(Script_data_state(case(in),det(the))))
------------------
add
fin

===========start============

------------------
rule: 
term: 
multiply(obj(code(det(the),compound(character),compound(reference))),obl(z0))
------------------
add
fin

===========start============

------------------
rule: 
term: 
consume(obj(character(det(the),amod(next),compound(input))))
------------------
add

------------------
rule: 
consume(obj(character(det(the),amod(next),compound(input))))
term: 
consume(X0)
------------------
leafCount == 0

------------------
rule: 
consume(obj(character(det(the),amod(next),compound(input))))
term: 
consume(obj(z0))
------------------
leafCount == 0
fin

===========start============
fin

===========start============

------------------
rule: 
term: 
add(X0)
------------------
leafCount == 0
fin

===========start============

------------------
rule: 
term: 
ignore(obj(character(det(the))))
------------------
add
fin

===========start============

------------------
rule: 
term: 
append(obj(z0),z1)
------------------
leafCount == 0

------------------
rule: 
term: 
append(obj(character(det(the),amod(current),compound(input))),obl(z0))
------------------
add

------------------
rule: 
append(obj(character(det(the),amod(current),compound(input))),obl(z0))
term: 
append(obj(character(X0)),obl(z1))
------------------
leafCount == 0

------------------
rule: 
append(obj(character(det(the),amod(current),compound(input))),obl(z0))
term: 
append(obj(character(det(the),amod(current),compound(input))),obl(buffer(case(to),det(the),amod(temporary))))
------------------
no change2

------------------
rule: 
append(obj(character(det(the),amod(current),compound(input))),obl(z0))
term: 
append(X0)
------------------
leafCount == 0
fin

===========start============

------------------
rule: 
term: 
error(nsubj(this),cop(is),det(an),amod(z0),compound(parse))
------------------
add

------------------
rule: 
error(nsubj(this),cop(is),det(an),amod(z0),compound(parse))
term: 
error(nsubj(this),cop(is),det(an),amod(unexpected-null-character),compound(parse))
------------------
no change2

------------------
rule: 
error(nsubj(this),cop(is),det(an),amod(z0),compound(parse))
term: 
error(X0)
------------------
leafCount == 0

------------------
rule: 
error(nsubj(this),cop(is),det(an),amod(z0),compound(parse))
term: 
error(nsubj(this),cop(is),det(a),amod(z0),compound(parse))
------------------
add

------------------
rule: 
error(nsubj(this),cop(is),det(an),amod(z0),compound(parse))
error(nsubj(this),cop(is),det(a),amod(z0),compound(parse))
term: 
error(nsubj(this),cop(is),det(z0),amod(z1),compound(parse))
------------------
children: 
error(nsubj(this),cop(is),det(an),amod(z0),compound(parse))
error(nsubj(this),cop(is),det(a),amod(z0),compound(parse))

------------------
rule: 
error(nsubj(this),cop(is),det(z0),amod(z1),compound(parse))
term: 
z0
------------------
leafCount == 0
fin

===========start============

------------------
rule: 
term: 
emit(obj(token(det(z0),z1)))
------------------
leafCount == 0

------------------
rule: 
term: 
emit(obj(token(det(an),amod(end-of-file))))
------------------
add

------------------
rule: 
emit(obj(token(det(an),amod(end-of-file))))
term: 
emit(obj(token(X0)))
------------------
leafCount == 0

------------------
rule: 
emit(obj(token(det(an),amod(end-of-file))))
term: 
emit(X0)
------------------
leafCount == 0

------------------
rule: 
emit(obj(token(det(an),amod(end-of-file))))
term: 
emit(obj(z0))
------------------
leafCount == 0
fin

===========start============

------------------
rule: 
term: 
flush(obj(points(compound(code),acl(consumed(obl(reference(case(as),det(a),compound(character))))))))
------------------
add
fin

===========start============

------------------
rule: 
term: 
treat(X0)
------------------
leafCount == 0

------------------
rule: 
term: 
treat(advmod(otherwise),punct(,),obj(it),obl(entry(case(as),case(per),det(the),compound(anything(punct("),amod(else),punct("))),advmod(below))))
------------------
add
fin

