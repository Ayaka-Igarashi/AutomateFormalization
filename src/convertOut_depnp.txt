--Data_state--
prev: 
 FAIL
trans: 
 U+0026 AMPERSAND (&amp;) :
  to(VB(Set),(the_return),Data_state(det(the)))
  to
 U+003C LESS-THAN SIGN (&lt;) :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  FAIL
 Anything else :
  FAIL

--RCDATA_state--
prev: 
 FAIL
trans: 
 U+0026 AMPERSAND (&amp;) :
  to(VB(Set),(the_return),RCDATA_state(det(the)))
  to
 U+003C LESS-THAN SIGN (&lt;) :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  FAIL
 Anything else :
  FAIL

--RAWTEXT_state--
prev: 
 FAIL
trans: 
 U+003C LESS-THAN SIGN (&lt;) :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  FAIL
 Anything else :
  FAIL

--Script_data_state--
prev: 
 FAIL
trans: 
 U+003C LESS-THAN SIGN (&lt;) :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  FAIL
 Anything else :
  FAIL

--PLAINTEXT_state--
prev: 
 FAIL
trans: 
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  FAIL
 Anything else :
  FAIL

--Tag_open_state--
prev: 
 FAIL
trans: 
 U+0021 EXCLAMATION MARK (!) :
  to
 U+002F SOLIDUS (/) :
  to
 ASCII alpha :
  set_to(name(nmod:poss(its),compound(tag)),(the_empty))
  FAIL
 U+003F QUESTION MARK (?) :
  is(error(det(an),amod(unexpected-question-mark-instead-of-tag-name),compound(parse)))
  is
  FAIL
 EOF :
  is(error(det(an),amod(eof-before-tag-name),compound(parse)))
  FAIL
 Anything else :
  is(error(det(an),amod(invalid-first-character-of-tag-name),compound(parse)))
  FAIL
  FAIL

--End_tag_open_state--
prev: 
 FAIL
trans: 
 ASCII alpha :
  set_to(name(nmod:poss(its),compound(tag)),(the_empty))
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(a),amod(missing-end-tag-name),compound(parse)))
  to
 EOF :
  is(error(det(an),amod(eof-before-tag-name),compound(parse)))
  FAIL
 Anything else :
  is(error(det(an),amod(invalid-first-character-of-tag-name),compound(parse)))
  is
  FAIL

--Tag_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+002F SOLIDUS (/) :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 ASCII upper alpha :
  to(S(VB(Append),(the_lowercase((of_the_current_input)))),PRN(-LRB-(-LRB-),S(VB(add),(),PP(IN(to),(code((the_'s))))),-RRB-(-RRB-)),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
 EOF :
  is(error(det(an),amod(eof-in-tag),compound(parse)))
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))

--RCDATA_less_than_sign_state--
prev: 
 FAIL
trans: 
 U+002F SOLIDUS (/) :
  to(VB(Set),(the_temporary),string(det(the),amod(empty)))
  to
 Anything else :
  FAIL
  FAIL

--RCDATA_end_tag_open_state--
prev: 
 FAIL
trans: 
 ASCII alpha :
  set_to(name(nmod:poss(its),compound(tag)),(the_empty))
  FAIL
 Anything else :
  FAIL
  FAIL

--RCDATA_end_tag_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000A LINE FEED (LF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000C FORM FEED (FF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+0020 SPACE :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+002F SOLIDUS (/) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Self_closing_start_tag_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+003E GREATER-THAN SIGN (&gt;) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Data_state(det(the)))
  emit(token(det(the),amod(current),compound(tag)))
  treat_it_as_per_the_"_else_"_below
 ASCII upper alpha :
  to(S(VB(Append),(the_lowercase((of_the_current_input)))),PRN(-LRB-(-LRB-),S(VB(add),(),PP(IN(to),(code((the_'s))))),-RRB-(-RRB-)),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 ASCII lower alpha :
  to(VB(Append),(the_current_input),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 Anything else :
  to
  FAIL

--RAWTEXT_less_than_sign_state--
prev: 
 FAIL
trans: 
 U+002F SOLIDUS (/) :
  to(VB(Set),(the_temporary),string(det(the),amod(empty)))
  to
 Anything else :
  FAIL
  FAIL

--RAWTEXT_end_tag_open_state--
prev: 
 FAIL
trans: 
 ASCII alpha :
  set_to(name(nmod:poss(its),compound(tag)),(the_empty))
  FAIL
 Anything else :
  FAIL
  FAIL

--RAWTEXT_end_tag_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000A LINE FEED (LF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000C FORM FEED (FF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+0020 SPACE :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+002F SOLIDUS (/) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Self_closing_start_tag_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+003E GREATER-THAN SIGN (&gt;) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Data_state(det(the)))
  emit(token(det(the),amod(current),compound(tag)))
  treat_it_as_per_the_"_else_"_below
 ASCII upper alpha :
  to(S(VB(Append),(the_lowercase((of_the_current_input)))),PRN(-LRB-(-LRB-),S(VB(add),(),PP(IN(to),(code((the_'s))))),-RRB-(-RRB-)),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 ASCII lower alpha :
  to(VB(Append),(the_current_input),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 Anything else :
  to
  FAIL

--Script_data_less_than_sign_state--
prev: 
 FAIL
trans: 
 U+002F SOLIDUS (/) :
  to(VB(Set),(the_temporary),string(det(the),amod(empty)))
  to
 U+0021 EXCLAMATION MARK (!) :
  to
  FAIL
 Anything else :
  FAIL
  FAIL

--Script_data_end_tag_open_state--
prev: 
 FAIL
trans: 
 ASCII alpha :
  set_to(name(nmod:poss(its),compound(tag)),(the_empty))
  FAIL
 Anything else :
  FAIL
  FAIL

--Script_data_end_tag_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000A LINE FEED (LF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000C FORM FEED (FF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+0020 SPACE :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+002F SOLIDUS (/) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Self_closing_start_tag_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+003E GREATER-THAN SIGN (&gt;) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Data_state(det(the)))
  emit(token(det(the),amod(current),compound(tag)))
  treat_it_as_per_the_"_else_"_below
 ASCII upper alpha :
  to(S(VB(Append),(the_lowercase((of_the_current_input)))),PRN(-LRB-(-LRB-),S(VB(add),(),PP(IN(to),(code((the_'s))))),-RRB-(-RRB-)),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 ASCII lower alpha :
  to(VB(Append),(the_current_input),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 Anything else :
  to
  FAIL

--Script_data_escape_start_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
  FAIL
  FAIL
 Anything else :
  FAIL

--Script_data_escape_start_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
  FAIL
  FAIL
 Anything else :
  FAIL

--Script_data_escaped_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
  FAIL
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-script-html-comment-like-text),compound(parse)))
  FAIL
 Anything else :
  FAIL

--Script_data_escaped_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
  FAIL
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-script-html-comment-like-text),compound(parse)))
  FAIL
 Anything else :
  to
  FAIL

--Script_data_escaped_dash_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  FAIL
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
  FAIL
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-script-html-comment-like-text),compound(parse)))
  FAIL
 Anything else :
  to
  FAIL

--Script_data_escaped_less_than_sign_state--
prev: 
 FAIL
trans: 
 U+002F SOLIDUS (/) :
  to(VB(Set),(the_temporary),string(det(the),amod(empty)))
  to
 ASCII alpha :
  to(VB(Set),(the_temporary),string(det(the),amod(empty)))
  FAIL
  FAIL
 Anything else :
  FAIL
  FAIL

--Script_data_escaped_end_tag_open_state--
prev: 
 FAIL
trans: 
 ASCII alpha :
  set_to(name(nmod:poss(its),compound(tag)),(the_empty))
  FAIL
 Anything else :
  FAIL
  FAIL

--Script_data_escaped_end_tag_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000A LINE FEED (LF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+000C FORM FEED (FF) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+0020 SPACE :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Before_attribute_name_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+002F SOLIDUS (/) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Self_closing_start_tag_state(det(the)))
  treat_it_as_per_the_"_else_"_below
 U+003E GREATER-THAN SIGN (&gt;) :
  is((the_current_end_tag),(an_appropriate_end_tag))
  switch_to(Data_state(det(the)))
  emit(token(det(the),amod(current),compound(tag)))
  treat_it_as_per_the_"_else_"_below
 ASCII upper alpha :
  to(S(VB(Append),(the_lowercase((of_the_current_input)))),PRN(-LRB-(-LRB-),S(VB(add),(),PP(IN(to),(code((the_'s))))),-RRB-(-RRB-)),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 ASCII lower alpha :
  to(VB(Append),(the_current_input),name(nmod:poss(token(det(the),amod(current),compound(tag),case('s))),compound(tag)))
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
 Anything else :
  to
  FAIL

--Script_data_double_escape_start_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  is((the_temporary),(the_string))
  switch_to(Script_data_double_escaped_state(det(the)))
  switch_to(Script_data_escaped_state(det(the)))
  FAIL
 U+000A LINE FEED (LF) :
  is((the_temporary),(the_string))
  switch_to(Script_data_double_escaped_state(det(the)))
  switch_to(Script_data_escaped_state(det(the)))
  FAIL
 U+000C FORM FEED (FF) :
  is((the_temporary),(the_string))
  switch_to(Script_data_double_escaped_state(det(the)))
  switch_to(Script_data_escaped_state(det(the)))
  FAIL
 U+0020 SPACE :
  is((the_temporary),(the_string))
  switch_to(Script_data_double_escaped_state(det(the)))
  switch_to(Script_data_escaped_state(det(the)))
  FAIL
 U+002F SOLIDUS (/) :
  is((the_temporary),(the_string))
  switch_to(Script_data_double_escaped_state(det(the)))
  switch_to(Script_data_escaped_state(det(the)))
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  is((the_temporary),(the_string))
  switch_to(Script_data_double_escaped_state(det(the)))
  switch_to(Script_data_escaped_state(det(the)))
  FAIL
 ASCII upper alpha :
  to
  to
  FAIL
 ASCII lower alpha :
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
  FAIL
 Anything else :
  FAIL

--Script_data_double_escaped_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
  FAIL
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  to
  FAIL
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-script-html-comment-like-text),compound(parse)))
  FAIL
 Anything else :
  FAIL

--Script_data_double_escaped_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
  FAIL
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  to
  FAIL
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-script-html-comment-like-text),compound(parse)))
  FAIL
 Anything else :
  to
  FAIL

--Script_data_double_escaped_dash_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  FAIL
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  to
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
  FAIL
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-script-html-comment-like-text),compound(parse)))
  FAIL
 Anything else :
  to
  FAIL

--Script_data_double_escaped_less_than_sign_state--
prev: 
 FAIL
trans: 
 U+002F SOLIDUS (/) :
  to(VB(Set),(the_temporary),string(det(the),amod(empty)))
  to
  FAIL
 Anything else :
  FAIL

--Script_data_double_escape_end_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  is((the_temporary),(the_string))
  switch_to(Script_data_escaped_state(det(the)))
  switch_to(Script_data_double_escaped_state(det(the)))
  FAIL
 U+000A LINE FEED (LF) :
  is((the_temporary),(the_string))
  switch_to(Script_data_escaped_state(det(the)))
  switch_to(Script_data_double_escaped_state(det(the)))
  FAIL
 U+000C FORM FEED (FF) :
  is((the_temporary),(the_string))
  switch_to(Script_data_escaped_state(det(the)))
  switch_to(Script_data_double_escaped_state(det(the)))
  FAIL
 U+0020 SPACE :
  is((the_temporary),(the_string))
  switch_to(Script_data_escaped_state(det(the)))
  switch_to(Script_data_double_escaped_state(det(the)))
  FAIL
 U+002F SOLIDUS (/) :
  is((the_temporary),(the_string))
  switch_to(Script_data_escaped_state(det(the)))
  switch_to(Script_data_double_escaped_state(det(the)))
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  is((the_temporary),(the_string))
  switch_to(Script_data_escaped_state(det(the)))
  switch_to(Script_data_double_escaped_state(det(the)))
  FAIL
 ASCII upper alpha :
  to
  to
  FAIL
 ASCII lower alpha :
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
  FAIL
 Anything else :
  FAIL

--Before_attribute_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+002F SOLIDUS (/) :
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  FAIL
 EOF :
  FAIL
 U+003D EQUALS SIGN (=) :
  is(error(det(an),amod(unexpected-equals-sign-before-attribute-name),compound(parse)))
  FAIL
  to(VB(Set),(((that_'s))),character(det(the),amod(current),compound(input)))
  to
  to
 Anything else :
  FAIL
  to(VB(Set),(that_attribute((and))),string(det(the),amod(empty)))
  FAIL

--Attribute_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+002F SOLIDUS (/) :
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  FAIL
 EOF :
  FAIL
 U+003D EQUALS SIGN (=) :
  to
 ASCII upper alpha :
  to(S(VB(Append),(the_lowercase((of_the_current_input)))),PRN(-LRB-(-LRB-),S(VB(add),(),PP(IN(to),(code((the_'s))))),-RRB-(-RRB-)),name(nmod:poss(attribute(det(the),amod(current),case('s)))))
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),name(nmod:poss(attribute(det(the),amod(current),case('s)))))
 U+0022 QUOTATION MARK (") :
  is(error(det(an),amod(unexpected-character-in-attribute-name),compound(parse)))
  FAIL
 U+0027 APOSTROPHE (') :
  is(error(det(an),amod(unexpected-character-in-attribute-name),compound(parse)))
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  is(error(det(an),amod(unexpected-character-in-attribute-name),compound(parse)))
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),name(nmod:poss(attribute(det(the),amod(current),case('s)))))

--After_attribute_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+002F SOLIDUS (/) :
  to
 U+003D EQUALS SIGN (=) :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-tag),compound(parse)))
  FAIL
 Anything else :
  FAIL
  to(VB(Set),(that_attribute((and))),string(det(the),amod(empty)))
  FAIL

--Before_attribute_value_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+0022 QUOTATION MARK (") :
  to
 U+0027 APOSTROPHE (') :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(a),amod(missing-attribute-value),compound(parse)))
  to
  FAIL
 Anything else :
  FAIL

--Attribute_value_double_quoted_state--
prev: 
 FAIL
trans: 
 U+0022 QUOTATION MARK (") :
  to
 U+0026 AMPERSAND (&amp;) :
  to(VB(Set),(the_return),Attribute_value_double_quoted_state(det(the)))
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),value(nmod:poss(attribute(det(the),amod(current),case('s)))))
 EOF :
  is(error(det(an),amod(eof-in-tag),compound(parse)))
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),value(nmod:poss(attribute(det(the),amod(current),case('s)))))

--Attribute_value_single_quoted_state--
prev: 
 FAIL
trans: 
 U+0027 APOSTROPHE (') :
  to
 U+0026 AMPERSAND (&amp;) :
  to(VB(Set),(the_return),Attribute_value_single_quoted_state(det(the)))
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),value(nmod:poss(attribute(det(the),amod(current),case('s)))))
 EOF :
  is(error(det(an),amod(eof-in-tag),compound(parse)))
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),value(nmod:poss(attribute(det(the),amod(current),case('s)))))

--Attribute_value_unquoted_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+0026 AMPERSAND (&amp;) :
  to(VB(Set),(the_return),Attribute_value_unquoted_state(det(the)))
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),value(nmod:poss(attribute(det(the),amod(current),case('s)))))
 U+0022 QUOTATION MARK (") :
  is(error(det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse)))
  FAIL
 U+0027 APOSTROPHE (') :
  is(error(det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse)))
  FAIL
 U+003C LESS-THAN SIGN (&lt;) :
  is(error(det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse)))
  FAIL
 U+003D EQUALS SIGN (=) :
  is(error(det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse)))
  FAIL
 U+0060 GRAVE ACCENT (`) :
  is(error(det(an),amod(unexpected-character-in-unquoted-attribute-value),compound(parse)))
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-tag),compound(parse)))
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),value(nmod:poss(attribute(det(the),amod(current),case('s)))))

--After_attribute_value_quoted_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+002F SOLIDUS (/) :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-tag),compound(parse)))
  FAIL
 Anything else :
  is(error(det(a),amod(missing-whitespace-between-attributes),compound(parse)))
  FAIL

--Self_closing_start_tag_state--
prev: 
 FAIL
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  FAIL
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-tag),compound(parse)))
  FAIL
 Anything else :
  is(error(det(an),amod(unexpected-solidus-in-tag),compound(parse)))
  FAIL

--Bogus_comment_state--
prev: 
 FAIL
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 EOF :
  FAIL
  FAIL
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),data(nmod:poss(token(det(the),compound(comment),case('s)))))
 Anything else :
  to(VB(Append),(the_current_input),data(nmod:poss(token(det(the),compound(comment),case('s)))))

--Markup_declaration_open_state--
prev: 
 FAIL
trans: 
 Two U+002D HYPHEN-MINUS characters (-) :
  create(token(det(a),compound(comment),acl:relcl(string(nsubj(data(nmod:poss(whose))),cop(is),det(the),amod(empty)))))
  switch_to(Comment_start_state(det(the)))
 ASCII case-insensitive match for the word "DOCTYPE" :
  switch_to(DOCTYPE_state(det(the)))
 The string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET character before and after) :
  FAIL
  is((),(an_adjusted_current))
  is
  switch_to(CDATA_section_state(det(the)))
  is(error(det(a),amod(cdata-in-html-content),compound(parse)))
  is
  to
 Anything else :
  is(error(det(an),amod(incorrectly-opened-comment),compound(parse)))
  is
  to
  consume

--Comment_start_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(an),amod(abrupt-closing-of-empty-comment),compound(parse)))
  to
  FAIL
 Anything else :
  FAIL

--Comment_start_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(an),amod(abrupt-closing-of-empty-comment),compound(parse)))
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-comment),compound(parse)))
  FAIL
  FAIL
 Anything else :
  FAIL
  to
  FAIL

--Comment_state--
prev: 
 FAIL
trans: 
 U+003C LESS-THAN SIGN (&lt;) :
  to(VB(Append),(the_current_input),data(nmod:poss(token(det(the),compound(comment),case('s)))))
  to
 U+002D HYPHEN-MINUS (-) :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),data(nmod:poss(token(det(the),compound(comment),case('s)))))
 EOF :
  is(error(det(an),amod(eof-in-comment),compound(parse)))
  FAIL
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),data(nmod:poss(token(det(the),compound(comment),case('s)))))

--Comment_less_than_sign_state--
prev: 
 FAIL
trans: 
 U+0021 EXCLAMATION MARK (!) :
  to(VB(Append),(the_current_input),data(nmod:poss(token(det(the),compound(comment),case('s)))))
  to
 U+003C LESS-THAN SIGN (&lt;) :
  to(VB(Append),(the_current_input),data(nmod:poss(token(det(the),compound(comment),case('s)))))
 Anything else :
  FAIL

--Comment_less_than_sign_bang_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
 Anything else :
  FAIL

--Comment_less_than_sign_bang_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
 Anything else :
  FAIL

--Comment_less_than_sign_bang_dash_dash_state--
prev: 
 FAIL
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  FAIL
 EOF :
  FAIL
 Anything else :
  is(error(det(a),amod(nested-comment),compound(parse)))
  FAIL

--Comment_end_dash_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  to
 EOF :
  is(error(det(an),amod(eof-in-comment),compound(parse)))
  FAIL
  FAIL
 Anything else :
  FAIL
  to
  FAIL

--Comment_end_state--
prev: 
 FAIL
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 U+0021 EXCLAMATION MARK (!) :
  to
 U+002D HYPHEN-MINUS (-) :
  FAIL
  to
 EOF :
  is(error(det(an),amod(eof-in-comment),compound(parse)))
  FAIL
  FAIL
 Anything else :
  FAIL
  to
  FAIL

--Comment_end_bang_state--
prev: 
 FAIL
trans: 
 U+002D HYPHEN-MINUS (-) :
  FAIL
  to
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(an),amod(incorrectly-closed-comment),compound(parse)))
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-comment),compound(parse)))
  FAIL
  FAIL
 Anything else :
  FAIL
  to
  FAIL

--DOCTYPE_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  FAIL
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(a),amod(missing-whitespace-before-doctype-name),compound(parse)))
  FAIL

--Before_DOCTYPE_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 ASCII upper alpha :
  FAIL
  to
  to
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
  to(VB(Set),(((the_'s))),character(det(a),compound(U+FFFD),compound(REPLACEMENT),compound(CHARACTER)))
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(a),amod(missing-doctype-name),compound(parse)))
  FAIL
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  FAIL
  to
  FAIL
  FAIL
 Anything else :
  FAIL
  to(VB(Set),(((the_'s))),character(det(the),amod(current),compound(input)))
  to

--DOCTYPE_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 ASCII upper alpha :
  to(VB(Append),(the_lowercase((of_the_current_input),(-LRB-_0x0020_-RRB-((to_code((the_'s))))))),name(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s)))))
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),name(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s)))))
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),name(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s)))))

--After_DOCTYPE_name_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  consume(characters(det(those)))
  switch_to(After_DOCTYPE_public_keyword_state(det(the)))
  consume(characters(det(those)))
  switch_to(After_DOCTYPE_system_keyword_state(det(the)))
  is(error(det(an),amod(invalid-character-sequence-after-doctype-name),compound(parse)))
  to
  FAIL

--After_DOCTYPE_public_keyword_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+0022 QUOTATION MARK (") :
  is(error(det(a),amod(missing-whitespace-after-doctype-public-keyword),compound(parse)))
  to(VB(Set),(public((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_public_identifier_double_quoted_state(det(the)))
 U+0027 APOSTROPHE (') :
  is(error(det(a),amod(missing-whitespace-after-doctype-public-keyword),compound(parse)))
  to(VB(Set),(public((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_public_identifier_single_quoted_state(det(the)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(a),amod(missing-doctype-public-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(a),amod(missing-quote-before-doctype-public-identifier),compound(parse)))
  to
  FAIL

--Before_DOCTYPE_public_identifier_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+0022 QUOTATION MARK (") :
  to(VB(Set),(public((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_public_identifier_double_quoted_state(det(the)))
 U+0027 APOSTROPHE (') :
  to(VB(Set),(public((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_public_identifier_single_quoted_state(det(the)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(a),amod(missing-doctype-public-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(a),amod(missing-quote-before-doctype-public-identifier),compound(parse)))
  to
  FAIL

--DOCTYPE_public_identifier_double_quoted_state--
prev: 
 FAIL
trans: 
 U+0022 QUOTATION MARK (") :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(an),amod(abrupt-doctype-public-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public)))

--DOCTYPE_public_identifier_single_quoted_state--
prev: 
 FAIL
trans: 
 U+0027 APOSTROPHE (') :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(an),amod(abrupt-doctype-public-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),amod(public)))

--After_DOCTYPE_public_identifier_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 U+0022 QUOTATION MARK (") :
  is(error(det(a),amod(missing-whitespace-between-doctype-public-and-system-identifiers),compound(parse)))
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_double_quoted_state(det(the)))
 U+0027 APOSTROPHE (') :
  is(error(det(a),amod(missing-whitespace-between-doctype-public-and-system-identifiers),compound(parse)))
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_single_quoted_state(det(the)))
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse)))
  to
  FAIL

--Between_DOCTYPE_public_and_system_identifiers_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 U+0022 QUOTATION MARK (") :
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_double_quoted_state(det(the)))
 U+0027 APOSTROPHE (') :
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_single_quoted_state(det(the)))
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse)))
  to
  FAIL

--After_DOCTYPE_system_keyword_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  to
 U+000A LINE FEED (LF) :
  to
 U+000C FORM FEED (FF) :
  to
 U+0020 SPACE :
  to
 U+0022 QUOTATION MARK (") :
  is(error(det(a),amod(missing-whitespace-after-doctype-system-keyword),compound(parse)))
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_double_quoted_state(det(the)))
 U+0027 APOSTROPHE (') :
  is(error(det(a),amod(missing-whitespace-after-doctype-system-keyword),compound(parse)))
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_single_quoted_state(det(the)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(a),amod(missing-doctype-system-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse)))
  to
  FAIL

--Before_DOCTYPE_system_identifier_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+0022 QUOTATION MARK (") :
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_double_quoted_state(det(the)))
 U+0027 APOSTROPHE (') :
  to(VB(Set),(system((the_DOCTYPE_'s))),string(det(the),amod(empty),amod(missing(punct(-LRB-),advmod(not),punct(-RRB-)))))
  switch_to(DOCTYPE_system_identifier_single_quoted_state(det(the)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(a),amod(missing-doctype-system-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(a),amod(missing-quote-before-doctype-system-identifier),compound(parse)))
  to
  FAIL

--DOCTYPE_system_identifier_double_quoted_state--
prev: 
 FAIL
trans: 
 U+0022 QUOTATION MARK (") :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(an),amod(abrupt-doctype-system-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system)))

--DOCTYPE_system_identifier_single_quoted_state--
prev: 
 FAIL
trans: 
 U+0027 APOSTROPHE (') :
  to
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  to(VB(Append),(a_U+FFFD_REPLACEMENT_CHARACTER),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system)))
 U+003E GREATER-THAN SIGN (&gt;) :
  is(error(det(an),amod(abrupt-doctype-system-identifier),compound(parse)))
  to
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  to(VB(Append),(the_current_input),identifier(nmod:poss(token(det(the),amod(current),compound(DOCTYPE),case('s))),compound(system)))

--After_DOCTYPE_system_identifier_state--
prev: 
 FAIL
trans: 
 U+0009 CHARACTER TABULATION (tab) :
  FAIL
 U+000A LINE FEED (LF) :
  FAIL
 U+000C FORM FEED (FF) :
  FAIL
 U+0020 SPACE :
  FAIL
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 EOF :
  is(error(det(an),amod(eof-in-doctype),compound(parse)))
  to
  FAIL
  FAIL
 Anything else :
  is(error(det(an),amod(unexpected-character-after-doctype-system-identifier),compound(parse)))
  FAIL
  set_to(flag(nmod:poss(token(det(the),compound(DOCTYPE),case('s))),compound(force-quirks)),ADVP(RP(on)))

--Bogus_DOCTYPE_state--
prev: 
 FAIL
trans: 
 U+003E GREATER-THAN SIGN (&gt;) :
  to
  FAIL
 U+0000 NULL :
  is(error(det(an),amod(unexpected-null-character),compound(parse)))
  FAIL
 EOF :
  FAIL
  FAIL
 Anything else :
  FAIL

--CDATA_section_state--
prev: 
 FAIL
trans: 
 U+005D RIGHT SQUARE BRACKET (]) :
  to
 EOF :
  is(error(det(an),amod(eof-in-cdata),compound(parse)))
  FAIL
 Anything else :
  FAIL

--CDATA_section_bracket_state--
prev: 
 FAIL
trans: 
 U+005D RIGHT SQUARE BRACKET (]) :
  to
 Anything else :
  FAIL
  FAIL

--CDATA_section_end_state--
prev: 
 FAIL
trans: 
 U+005D RIGHT SQUARE BRACKET (]) :
  FAIL
 U+003E GREATER-THAN SIGN character :
  to
 Anything else :
  FAIL
  FAIL

--Character_reference_state--
prev: 
 to(VB(Set),(the_temporary),string(det(the),amod(empty)))
 to
 FAIL
trans: 
 ASCII alphanumeric :
  FAIL
 U+0023 NUMBER SIGN (#) :
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
  to
 Anything else :
  FAIL
  FAIL

--Named_character_reference_state--
prev: 
 FAIL
 to
trans: 
 If there is a match :
  is
  is((the_next_input),(((either_a),(SIGN(or_an_ASCII(-LRB-_=))))))
  switch_to(state(det(the),compound(return)))
  to(VB(Append),(((((or))),(((to_the_character_reference),(-LRB-_as_-RRB-((by_the_second((of_the_named((character))))))))))),points(nsubj(code(det(the),amod(temporary),compound(buffer.Flush))),xcomp(consumed(obl(reference(case(as),det(a),compound(character)))))))
  to
 Otherwise :
  FAIL
  to

--Ambiguous_ampersand_state--
prev: 
 FAIL
trans: 
 ASCII alphanumeric :
  to(VB(append),(the_current_input),value(nmod:poss(attribute(det(the),amod(current),case('s)))))
  emit_the_current_input_as_a_character
 U+003B SEMICOLON (;) :
  is(error(det(an),amod(unknown-named-character-reference),compound(parse)))
  FAIL
 Anything else :
  FAIL

--Numeric_character_reference_state--
prev: 
 to
trans: 
 U+0078 LATIN SMALL LETTER X :
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
  to
 U+0058 LATIN CAPITAL LETTER X :
  to(VB(Append),(the_current_input),buffer(det(the),amod(temporary)))
  to
 Anything else :
  FAIL

--Hexadecimal_character_reference_start_state--
prev: 
 FAIL
trans: 
 ASCII hex digit :
  FAIL
 Anything else :
  is(error(det(an),amod(absence-of-digits-in-numeric-character-reference),compound(parse)))
  FAIL
  FAIL

--Decimal_character_reference_start_state--
prev: 
 FAIL
trans: 
 ASCII digit :
  FAIL
 Anything else :
  is(error(det(an),amod(absence-of-digits-in-numeric-character-reference),compound(parse)))
  FAIL
  FAIL

--Hexadecimal_character_reference_state--
prev: 
 FAIL
trans: 
 ASCII digit :
  FAIL
  to(VB(Add),(a_numeric((of_the_current_input((-LRB-_0x0030_-RRB-((from_code((the_'s))))))))),code(det(the),compound(reference(compound(character)))))
 ASCII upper hex digit :
  FAIL
  to(VB(Add),(a_numeric((of_the_current_input((as_a_hexadecimal))),(-LRB-_0x0037_-RRB-((from_code((the_'s))))))),code(det(the),compound(reference(compound(character)))))
 ASCII lower hex digit :
  FAIL
  to(VB(Add),(a_numeric((of_the_current_input((as_a_hexadecimal))),(-LRB-_0x0057_-RRB-((from_code((the_'s))))))),code(det(the),compound(reference(compound(character)))))
 U+003B SEMICOLON :
  to
 Anything else :
  is(error(det(a),amod(missing-semicolon-after-character-reference),compound(parse)))
  FAIL

--Decimal_character_reference_state--
prev: 
 FAIL
trans: 
 ASCII digit :
  FAIL
  to(VB(Add),(a_numeric((of_the_current_input((-LRB-_0x0030_-RRB-((from_code((the_'s))))))))),code(det(the),compound(reference(compound(character)))))
 U+003B SEMICOLON :
  to
 Anything else :
  is(error(det(a),amod(missing-semicolon-after-character-reference),compound(parse)))
  FAIL

